// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: artist.sql

package sqlcgen

import (
	"context"
)

const existsArtist = `-- name: ExistsArtist :one
SELECT EXISTS (
  SELECT 1 FROM artists WHERE id = $1
) AS exists
`

func (q *Queries) ExistsArtist(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsArtist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getArtistByID = `-- name: GetArtistByID :one
SELECT id, name, kana FROM artists WHERE id = $1
`

func (q *Queries) GetArtistByID(ctx context.Context, id int32) (Artist, error) {
	row := q.db.QueryRowContext(ctx, getArtistByID, id)
	var i Artist
	err := row.Scan(&i.ID, &i.Name, &i.Kana)
	return i, err
}

const insertArtist = `-- name: InsertArtist :one
INSERT INTO artists (name, kana)
VALUES ($1, $2)
RETURNING id, name, kana
`

type InsertArtistParams struct {
	Name string
	Kana string
}

func (q *Queries) InsertArtist(ctx context.Context, arg InsertArtistParams) (Artist, error) {
	row := q.db.QueryRowContext(ctx, insertArtist, arg.Name, arg.Kana)
	var i Artist
	err := row.Scan(&i.ID, &i.Name, &i.Kana)
	return i, err
}

const listArtists = `-- name: ListArtists :many
SELECT id, name, kana FROM artists ORDER BY id
`

func (q *Queries) ListArtists(ctx context.Context) ([]Artist, error) {
	rows, err := q.db.QueryContext(ctx, listArtists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artist
	for rows.Next() {
		var i Artist
		if err := rows.Scan(&i.ID, &i.Name, &i.Kana); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
