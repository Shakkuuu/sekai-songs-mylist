// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: my_list_chart.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const deleteMyListChart = `-- name: DeleteMyListChart :exec
DELETE
FROM my_list_charts
WHERE id = $1
`

func (q *Queries) DeleteMyListChart(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMyListChart, id)
	return err
}

const deleteMyListChartByMyListID = `-- name: DeleteMyListChartByMyListID :exec
DELETE
FROM my_list_charts
WHERE my_list_id = $1
`

func (q *Queries) DeleteMyListChartByMyListID(ctx context.Context, myListID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteMyListChartByMyListID, myListID)
	return err
}

const existsMyListChart = `-- name: ExistsMyListChart :one
SELECT EXISTS (
    SELECT 1 FROM my_list_charts WHERE id = $1
) AS exists
`

func (q *Queries) ExistsMyListChart(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsMyListChart, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const existsMyListChartByMyListIDAndChartID = `-- name: ExistsMyListChartByMyListIDAndChartID :one
SELECT EXISTS (
    SELECT 1 FROM my_list_charts WHERE my_list_id = $1 AND chart_id = $2
) AS exists
`

type ExistsMyListChartByMyListIDAndChartIDParams struct {
	MyListID sql.NullInt32
	ChartID  sql.NullInt32
}

func (q *Queries) ExistsMyListChartByMyListIDAndChartID(ctx context.Context, arg ExistsMyListChartByMyListIDAndChartIDParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsMyListChartByMyListIDAndChartID, arg.MyListID, arg.ChartID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getMyListChartByID = `-- name: GetMyListChartByID :one
SELECT id, my_list_id, chart_id, clear_type, memo, created_at, updated_at FROM my_list_charts WHERE id = $1
`

func (q *Queries) GetMyListChartByID(ctx context.Context, id int32) (MyListChart, error) {
	row := q.db.QueryRowContext(ctx, getMyListChartByID, id)
	var i MyListChart
	err := row.Scan(
		&i.ID,
		&i.MyListID,
		&i.ChartID,
		&i.ClearType,
		&i.Memo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertMyListChart = `-- name: InsertMyListChart :one
INSERT INTO my_list_charts (my_list_id, chart_id, clear_type, memo, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, my_list_id, chart_id, clear_type, memo, created_at, updated_at
`

type InsertMyListChartParams struct {
	MyListID  sql.NullInt32
	ChartID   sql.NullInt32
	ClearType sql.NullInt32
	Memo      sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) InsertMyListChart(ctx context.Context, arg InsertMyListChartParams) (MyListChart, error) {
	row := q.db.QueryRowContext(ctx, insertMyListChart,
		arg.MyListID,
		arg.ChartID,
		arg.ClearType,
		arg.Memo,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i MyListChart
	err := row.Scan(
		&i.ID,
		&i.MyListID,
		&i.ChartID,
		&i.ClearType,
		&i.Memo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMyListChartsByMyListID = `-- name: ListMyListChartsByMyListID :many
SELECT id, my_list_id, chart_id, clear_type, memo, created_at, updated_at FROM my_list_charts WHERE my_list_id = $1 ORDER BY id
`

func (q *Queries) ListMyListChartsByMyListID(ctx context.Context, myListID sql.NullInt32) ([]MyListChart, error) {
	rows, err := q.db.QueryContext(ctx, listMyListChartsByMyListID, myListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MyListChart
	for rows.Next() {
		var i MyListChart
		if err := rows.Scan(
			&i.ID,
			&i.MyListID,
			&i.ChartID,
			&i.ClearType,
			&i.Memo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMyListChartClearType = `-- name: UpdateMyListChartClearType :exec
UPDATE my_list_charts
SET clear_type = $1,
    updated_at = $2
WHERE id = $3
`

type UpdateMyListChartClearTypeParams struct {
	ClearType sql.NullInt32
	UpdatedAt sql.NullTime
	ID        int32
}

func (q *Queries) UpdateMyListChartClearType(ctx context.Context, arg UpdateMyListChartClearTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateMyListChartClearType, arg.ClearType, arg.UpdatedAt, arg.ID)
	return err
}

const updateMyListChartMemo = `-- name: UpdateMyListChartMemo :exec
UPDATE my_list_charts
SET memo = $1,
    updated_at = $2
WHERE id = $3
`

type UpdateMyListChartMemoParams struct {
	Memo      sql.NullString
	UpdatedAt sql.NullTime
	ID        int32
}

func (q *Queries) UpdateMyListChartMemo(ctx context.Context, arg UpdateMyListChartMemoParams) error {
	_, err := q.db.ExecContext(ctx, updateMyListChartMemo, arg.Memo, arg.UpdatedAt, arg.ID)
	return err
}
