// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: my_list_chart_attachment.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const deleteMyListChartAttachment = `-- name: DeleteMyListChartAttachment :exec
DELETE
FROM my_list_chart_attachments
WHERE id = $1
`

func (q *Queries) DeleteMyListChartAttachment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMyListChartAttachment, id)
	return err
}

const deleteMyListChartAttachmentByMyListChartID = `-- name: DeleteMyListChartAttachmentByMyListChartID :exec
DELETE
FROM my_list_chart_attachments
WHERE my_list_chart_id = $1
`

func (q *Queries) DeleteMyListChartAttachmentByMyListChartID(ctx context.Context, myListChartID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteMyListChartAttachmentByMyListChartID, myListChartID)
	return err
}

const existsMyListChartAttachment = `-- name: ExistsMyListChartAttachment :one
SELECT EXISTS (
    SELECT 1 FROM my_list_chart_attachments WHERE id = $1
) AS exists
`

func (q *Queries) ExistsMyListChartAttachment(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsMyListChartAttachment, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getMyListChartAttachmentByID = `-- name: GetMyListChartAttachmentByID :one
SELECT id, my_list_chart_id, attachment_type, file_url, caption, created_at FROM my_list_chart_attachments WHERE id = $1
`

func (q *Queries) GetMyListChartAttachmentByID(ctx context.Context, id int32) (MyListChartAttachment, error) {
	row := q.db.QueryRowContext(ctx, getMyListChartAttachmentByID, id)
	var i MyListChartAttachment
	err := row.Scan(
		&i.ID,
		&i.MyListChartID,
		&i.AttachmentType,
		&i.FileUrl,
		&i.Caption,
		&i.CreatedAt,
	)
	return i, err
}

const insertMyListChartAttachment = `-- name: InsertMyListChartAttachment :one
INSERT INTO my_list_chart_attachments (my_list_chart_id, attachment_type, file_url, caption, created_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, my_list_chart_id, attachment_type, file_url, caption, created_at
`

type InsertMyListChartAttachmentParams struct {
	MyListChartID  sql.NullInt32
	AttachmentType sql.NullInt32
	FileUrl        sql.NullString
	Caption        sql.NullString
	CreatedAt      sql.NullTime
}

func (q *Queries) InsertMyListChartAttachment(ctx context.Context, arg InsertMyListChartAttachmentParams) (MyListChartAttachment, error) {
	row := q.db.QueryRowContext(ctx, insertMyListChartAttachment,
		arg.MyListChartID,
		arg.AttachmentType,
		arg.FileUrl,
		arg.Caption,
		arg.CreatedAt,
	)
	var i MyListChartAttachment
	err := row.Scan(
		&i.ID,
		&i.MyListChartID,
		&i.AttachmentType,
		&i.FileUrl,
		&i.Caption,
		&i.CreatedAt,
	)
	return i, err
}

const listMyListChartAttachmentsByMyListChartID = `-- name: ListMyListChartAttachmentsByMyListChartID :many
SELECT id, my_list_chart_id, attachment_type, file_url, caption, created_at FROM my_list_chart_attachments WHERE my_list_chart_id = $1 ORDER BY id
`

func (q *Queries) ListMyListChartAttachmentsByMyListChartID(ctx context.Context, myListChartID sql.NullInt32) ([]MyListChartAttachment, error) {
	rows, err := q.db.QueryContext(ctx, listMyListChartAttachmentsByMyListChartID, myListChartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MyListChartAttachment
	for rows.Next() {
		var i MyListChartAttachment
		if err := rows.Scan(
			&i.ID,
			&i.MyListChartID,
			&i.AttachmentType,
			&i.FileUrl,
			&i.Caption,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
