// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: singer.sql

package sqlcgen

import (
	"context"
)

const getSingerByID = `-- name: GetSingerByID :one
SELECT id, name FROM singers WHERE id = $1
`

func (q *Queries) GetSingerByID(ctx context.Context, id int32) (Singer, error) {
	row := q.db.QueryRowContext(ctx, getSingerByID, id)
	var i Singer
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertSinger = `-- name: InsertSinger :exec
INSERT INTO singers (name)
VALUES ($1)
`

func (q *Queries) InsertSinger(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, insertSinger, name)
	return err
}

const listSingers = `-- name: ListSingers :many
SELECT id, name FROM singers ORDER BY id
`

func (q *Queries) ListSingers(ctx context.Context) ([]Singer, error) {
	rows, err := q.db.QueryContext(ctx, listSingers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Singer
	for rows.Next() {
		var i Singer
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
