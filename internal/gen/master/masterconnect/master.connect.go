// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: master/master.proto

package masterconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	master "github.com/Shakkuuu/sekai-songs-mylist/internal/gen/master"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MasterServiceName is the fully-qualified name of the MasterService service.
	MasterServiceName = "master.MasterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MasterServiceGetArtistsProcedure is the fully-qualified name of the MasterService's GetArtists
	// RPC.
	MasterServiceGetArtistsProcedure = "/master.MasterService/GetArtists"
	// MasterServiceGetArtistProcedure is the fully-qualified name of the MasterService's GetArtist RPC.
	MasterServiceGetArtistProcedure = "/master.MasterService/GetArtist"
	// MasterServiceCreateArtistProcedure is the fully-qualified name of the MasterService's
	// CreateArtist RPC.
	MasterServiceCreateArtistProcedure = "/master.MasterService/CreateArtist"
	// MasterServiceGetSongsProcedure is the fully-qualified name of the MasterService's GetSongs RPC.
	MasterServiceGetSongsProcedure = "/master.MasterService/GetSongs"
	// MasterServiceGetSongProcedure is the fully-qualified name of the MasterService's GetSong RPC.
	MasterServiceGetSongProcedure = "/master.MasterService/GetSong"
)

// MasterServiceClient is a client for the master.MasterService service.
type MasterServiceClient interface {
	GetArtists(context.Context, *connect.Request[master.GetArtistsRequest]) (*connect.Response[master.GetArtistsResponse], error)
	GetArtist(context.Context, *connect.Request[master.GetArtistRequest]) (*connect.Response[master.GetArtistResponse], error)
	CreateArtist(context.Context, *connect.Request[master.CreateArtistRequest]) (*connect.Response[master.CreateArtistResponse], error)
	GetSongs(context.Context, *connect.Request[master.GetSongsRequest]) (*connect.Response[master.GetSongsResponse], error)
	GetSong(context.Context, *connect.Request[master.GetSongRequest]) (*connect.Response[master.GetSongResponse], error)
}

// NewMasterServiceClient constructs a client for the master.MasterService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMasterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MasterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	masterServiceMethods := master.File_master_master_proto.Services().ByName("MasterService").Methods()
	return &masterServiceClient{
		getArtists: connect.NewClient[master.GetArtistsRequest, master.GetArtistsResponse](
			httpClient,
			baseURL+MasterServiceGetArtistsProcedure,
			connect.WithSchema(masterServiceMethods.ByName("GetArtists")),
			connect.WithClientOptions(opts...),
		),
		getArtist: connect.NewClient[master.GetArtistRequest, master.GetArtistResponse](
			httpClient,
			baseURL+MasterServiceGetArtistProcedure,
			connect.WithSchema(masterServiceMethods.ByName("GetArtist")),
			connect.WithClientOptions(opts...),
		),
		createArtist: connect.NewClient[master.CreateArtistRequest, master.CreateArtistResponse](
			httpClient,
			baseURL+MasterServiceCreateArtistProcedure,
			connect.WithSchema(masterServiceMethods.ByName("CreateArtist")),
			connect.WithClientOptions(opts...),
		),
		getSongs: connect.NewClient[master.GetSongsRequest, master.GetSongsResponse](
			httpClient,
			baseURL+MasterServiceGetSongsProcedure,
			connect.WithSchema(masterServiceMethods.ByName("GetSongs")),
			connect.WithClientOptions(opts...),
		),
		getSong: connect.NewClient[master.GetSongRequest, master.GetSongResponse](
			httpClient,
			baseURL+MasterServiceGetSongProcedure,
			connect.WithSchema(masterServiceMethods.ByName("GetSong")),
			connect.WithClientOptions(opts...),
		),
	}
}

// masterServiceClient implements MasterServiceClient.
type masterServiceClient struct {
	getArtists   *connect.Client[master.GetArtistsRequest, master.GetArtistsResponse]
	getArtist    *connect.Client[master.GetArtistRequest, master.GetArtistResponse]
	createArtist *connect.Client[master.CreateArtistRequest, master.CreateArtistResponse]
	getSongs     *connect.Client[master.GetSongsRequest, master.GetSongsResponse]
	getSong      *connect.Client[master.GetSongRequest, master.GetSongResponse]
}

// GetArtists calls master.MasterService.GetArtists.
func (c *masterServiceClient) GetArtists(ctx context.Context, req *connect.Request[master.GetArtistsRequest]) (*connect.Response[master.GetArtistsResponse], error) {
	return c.getArtists.CallUnary(ctx, req)
}

// GetArtist calls master.MasterService.GetArtist.
func (c *masterServiceClient) GetArtist(ctx context.Context, req *connect.Request[master.GetArtistRequest]) (*connect.Response[master.GetArtistResponse], error) {
	return c.getArtist.CallUnary(ctx, req)
}

// CreateArtist calls master.MasterService.CreateArtist.
func (c *masterServiceClient) CreateArtist(ctx context.Context, req *connect.Request[master.CreateArtistRequest]) (*connect.Response[master.CreateArtistResponse], error) {
	return c.createArtist.CallUnary(ctx, req)
}

// GetSongs calls master.MasterService.GetSongs.
func (c *masterServiceClient) GetSongs(ctx context.Context, req *connect.Request[master.GetSongsRequest]) (*connect.Response[master.GetSongsResponse], error) {
	return c.getSongs.CallUnary(ctx, req)
}

// GetSong calls master.MasterService.GetSong.
func (c *masterServiceClient) GetSong(ctx context.Context, req *connect.Request[master.GetSongRequest]) (*connect.Response[master.GetSongResponse], error) {
	return c.getSong.CallUnary(ctx, req)
}

// MasterServiceHandler is an implementation of the master.MasterService service.
type MasterServiceHandler interface {
	GetArtists(context.Context, *connect.Request[master.GetArtistsRequest]) (*connect.Response[master.GetArtistsResponse], error)
	GetArtist(context.Context, *connect.Request[master.GetArtistRequest]) (*connect.Response[master.GetArtistResponse], error)
	CreateArtist(context.Context, *connect.Request[master.CreateArtistRequest]) (*connect.Response[master.CreateArtistResponse], error)
	GetSongs(context.Context, *connect.Request[master.GetSongsRequest]) (*connect.Response[master.GetSongsResponse], error)
	GetSong(context.Context, *connect.Request[master.GetSongRequest]) (*connect.Response[master.GetSongResponse], error)
}

// NewMasterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMasterServiceHandler(svc MasterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	masterServiceMethods := master.File_master_master_proto.Services().ByName("MasterService").Methods()
	masterServiceGetArtistsHandler := connect.NewUnaryHandler(
		MasterServiceGetArtistsProcedure,
		svc.GetArtists,
		connect.WithSchema(masterServiceMethods.ByName("GetArtists")),
		connect.WithHandlerOptions(opts...),
	)
	masterServiceGetArtistHandler := connect.NewUnaryHandler(
		MasterServiceGetArtistProcedure,
		svc.GetArtist,
		connect.WithSchema(masterServiceMethods.ByName("GetArtist")),
		connect.WithHandlerOptions(opts...),
	)
	masterServiceCreateArtistHandler := connect.NewUnaryHandler(
		MasterServiceCreateArtistProcedure,
		svc.CreateArtist,
		connect.WithSchema(masterServiceMethods.ByName("CreateArtist")),
		connect.WithHandlerOptions(opts...),
	)
	masterServiceGetSongsHandler := connect.NewUnaryHandler(
		MasterServiceGetSongsProcedure,
		svc.GetSongs,
		connect.WithSchema(masterServiceMethods.ByName("GetSongs")),
		connect.WithHandlerOptions(opts...),
	)
	masterServiceGetSongHandler := connect.NewUnaryHandler(
		MasterServiceGetSongProcedure,
		svc.GetSong,
		connect.WithSchema(masterServiceMethods.ByName("GetSong")),
		connect.WithHandlerOptions(opts...),
	)
	return "/master.MasterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MasterServiceGetArtistsProcedure:
			masterServiceGetArtistsHandler.ServeHTTP(w, r)
		case MasterServiceGetArtistProcedure:
			masterServiceGetArtistHandler.ServeHTTP(w, r)
		case MasterServiceCreateArtistProcedure:
			masterServiceCreateArtistHandler.ServeHTTP(w, r)
		case MasterServiceGetSongsProcedure:
			masterServiceGetSongsHandler.ServeHTTP(w, r)
		case MasterServiceGetSongProcedure:
			masterServiceGetSongHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMasterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMasterServiceHandler struct{}

func (UnimplementedMasterServiceHandler) GetArtists(context.Context, *connect.Request[master.GetArtistsRequest]) (*connect.Response[master.GetArtistsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("master.MasterService.GetArtists is not implemented"))
}

func (UnimplementedMasterServiceHandler) GetArtist(context.Context, *connect.Request[master.GetArtistRequest]) (*connect.Response[master.GetArtistResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("master.MasterService.GetArtist is not implemented"))
}

func (UnimplementedMasterServiceHandler) CreateArtist(context.Context, *connect.Request[master.CreateArtistRequest]) (*connect.Response[master.CreateArtistResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("master.MasterService.CreateArtist is not implemented"))
}

func (UnimplementedMasterServiceHandler) GetSongs(context.Context, *connect.Request[master.GetSongsRequest]) (*connect.Response[master.GetSongsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("master.MasterService.GetSongs is not implemented"))
}

func (UnimplementedMasterServiceHandler) GetSong(context.Context, *connect.Request[master.GetSongRequest]) (*connect.Response[master.GetSongResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("master.MasterService.GetSong is not implemented"))
}
