// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: master/master.proto

package master

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "github.com/Shakkuuu/sekai-songs-mylist/internal/gen/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.MusicVideoType(0)
)

// Validate checks the field values on GetArtistsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArtistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArtistsRequestMultiError, or nil if none found.
func (m *GetArtistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetArtistsRequestMultiError(errors)
	}

	return nil
}

// GetArtistsRequestMultiError is an error wrapping multiple validation errors
// returned by GetArtistsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetArtistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtistsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtistsRequestMultiError) AllErrors() []error { return m }

// GetArtistsRequestValidationError is the validation error returned by
// GetArtistsRequest.Validate if the designated constraints aren't met.
type GetArtistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtistsRequestValidationError) ErrorName() string {
	return "GetArtistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtistsRequestValidationError{}

// Validate checks the field values on GetArtistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArtistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArtistsResponseMultiError, or nil if none found.
func (m *GetArtistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArtists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArtistsResponseValidationError{
						field:  fmt.Sprintf("Artists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArtistsResponseValidationError{
						field:  fmt.Sprintf("Artists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArtistsResponseValidationError{
					field:  fmt.Sprintf("Artists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArtistsResponseMultiError(errors)
	}

	return nil
}

// GetArtistsResponseMultiError is an error wrapping multiple validation errors
// returned by GetArtistsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetArtistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtistsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtistsResponseMultiError) AllErrors() []error { return m }

// GetArtistsResponseValidationError is the validation error returned by
// GetArtistsResponse.Validate if the designated constraints aren't met.
type GetArtistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtistsResponseValidationError) ErrorName() string {
	return "GetArtistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtistsResponseValidationError{}

// Validate checks the field values on GetArtistRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArtistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArtistRequestMultiError, or nil if none found.
func (m *GetArtistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetArtistRequestMultiError(errors)
	}

	return nil
}

// GetArtistRequestMultiError is an error wrapping multiple validation errors
// returned by GetArtistRequest.ValidateAll() if the designated constraints
// aren't met.
type GetArtistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtistRequestMultiError) AllErrors() []error { return m }

// GetArtistRequestValidationError is the validation error returned by
// GetArtistRequest.Validate if the designated constraints aren't met.
type GetArtistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtistRequestValidationError) ErrorName() string { return "GetArtistRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetArtistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtistRequestValidationError{}

// Validate checks the field values on GetArtistResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArtistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArtistResponseMultiError, or nil if none found.
func (m *GetArtistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArtist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetArtistResponseValidationError{
					field:  "Artist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetArtistResponseValidationError{
					field:  "Artist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArtistResponseValidationError{
				field:  "Artist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetArtistResponseMultiError(errors)
	}

	return nil
}

// GetArtistResponseMultiError is an error wrapping multiple validation errors
// returned by GetArtistResponse.ValidateAll() if the designated constraints
// aren't met.
type GetArtistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtistResponseMultiError) AllErrors() []error { return m }

// GetArtistResponseValidationError is the validation error returned by
// GetArtistResponse.Validate if the designated constraints aren't met.
type GetArtistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtistResponseValidationError) ErrorName() string {
	return "GetArtistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtistResponseValidationError{}

// Validate checks the field values on CreateArtistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArtistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArtistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArtistRequestMultiError, or nil if none found.
func (m *CreateArtistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArtistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateArtistRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKana()); l < 1 || l > 255 {
		err := CreateArtistRequestValidationError{
			field:  "Kana",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateArtistRequestMultiError(errors)
	}

	return nil
}

// CreateArtistRequestMultiError is an error wrapping multiple validation
// errors returned by CreateArtistRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateArtistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArtistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArtistRequestMultiError) AllErrors() []error { return m }

// CreateArtistRequestValidationError is the validation error returned by
// CreateArtistRequest.Validate if the designated constraints aren't met.
type CreateArtistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtistRequestValidationError) ErrorName() string {
	return "CreateArtistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtistRequestValidationError{}

// Validate checks the field values on CreateArtistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArtistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArtistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArtistResponseMultiError, or nil if none found.
func (m *CreateArtistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArtistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateArtistResponseMultiError(errors)
	}

	return nil
}

// CreateArtistResponseMultiError is an error wrapping multiple validation
// errors returned by CreateArtistResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateArtistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArtistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArtistResponseMultiError) AllErrors() []error { return m }

// CreateArtistResponseValidationError is the validation error returned by
// CreateArtistResponse.Validate if the designated constraints aren't met.
type CreateArtistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtistResponseValidationError) ErrorName() string {
	return "CreateArtistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtistResponseValidationError{}

// Validate checks the field values on GetSingersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSingersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSingersRequestMultiError, or nil if none found.
func (m *GetSingersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSingersRequestMultiError(errors)
	}

	return nil
}

// GetSingersRequestMultiError is an error wrapping multiple validation errors
// returned by GetSingersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSingersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingersRequestMultiError) AllErrors() []error { return m }

// GetSingersRequestValidationError is the validation error returned by
// GetSingersRequest.Validate if the designated constraints aren't met.
type GetSingersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingersRequestValidationError) ErrorName() string {
	return "GetSingersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingersRequestValidationError{}

// Validate checks the field values on GetSingersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSingersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSingersResponseMultiError, or nil if none found.
func (m *GetSingersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSingers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSingersResponseValidationError{
						field:  fmt.Sprintf("Singers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSingersResponseValidationError{
						field:  fmt.Sprintf("Singers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSingersResponseValidationError{
					field:  fmt.Sprintf("Singers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSingersResponseMultiError(errors)
	}

	return nil
}

// GetSingersResponseMultiError is an error wrapping multiple validation errors
// returned by GetSingersResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSingersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingersResponseMultiError) AllErrors() []error { return m }

// GetSingersResponseValidationError is the validation error returned by
// GetSingersResponse.Validate if the designated constraints aren't met.
type GetSingersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingersResponseValidationError) ErrorName() string {
	return "GetSingersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingersResponseValidationError{}

// Validate checks the field values on GetSingerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSingerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSingerRequestMultiError, or nil if none found.
func (m *GetSingerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSingerRequestMultiError(errors)
	}

	return nil
}

// GetSingerRequestMultiError is an error wrapping multiple validation errors
// returned by GetSingerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSingerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingerRequestMultiError) AllErrors() []error { return m }

// GetSingerRequestValidationError is the validation error returned by
// GetSingerRequest.Validate if the designated constraints aren't met.
type GetSingerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingerRequestValidationError) ErrorName() string { return "GetSingerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSingerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingerRequestValidationError{}

// Validate checks the field values on GetSingerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSingerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSingerResponseMultiError, or nil if none found.
func (m *GetSingerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSinger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSingerResponseValidationError{
					field:  "Singer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSingerResponseValidationError{
					field:  "Singer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSinger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSingerResponseValidationError{
				field:  "Singer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSingerResponseMultiError(errors)
	}

	return nil
}

// GetSingerResponseMultiError is an error wrapping multiple validation errors
// returned by GetSingerResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSingerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingerResponseMultiError) AllErrors() []error { return m }

// GetSingerResponseValidationError is the validation error returned by
// GetSingerResponse.Validate if the designated constraints aren't met.
type GetSingerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingerResponseValidationError) ErrorName() string {
	return "GetSingerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingerResponseValidationError{}

// Validate checks the field values on CreateSingerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSingerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSingerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSingerRequestMultiError, or nil if none found.
func (m *CreateSingerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSingerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateSingerRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateSingerRequestMultiError(errors)
	}

	return nil
}

// CreateSingerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSingerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSingerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSingerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSingerRequestMultiError) AllErrors() []error { return m }

// CreateSingerRequestValidationError is the validation error returned by
// CreateSingerRequest.Validate if the designated constraints aren't met.
type CreateSingerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSingerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSingerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSingerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSingerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSingerRequestValidationError) ErrorName() string {
	return "CreateSingerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSingerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSingerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSingerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSingerRequestValidationError{}

// Validate checks the field values on CreateSingerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSingerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSingerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSingerResponseMultiError, or nil if none found.
func (m *CreateSingerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSingerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSingerResponseMultiError(errors)
	}

	return nil
}

// CreateSingerResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSingerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSingerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSingerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSingerResponseMultiError) AllErrors() []error { return m }

// CreateSingerResponseValidationError is the validation error returned by
// CreateSingerResponse.Validate if the designated constraints aren't met.
type CreateSingerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSingerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSingerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSingerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSingerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSingerResponseValidationError) ErrorName() string {
	return "CreateSingerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSingerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSingerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSingerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSingerResponseValidationError{}

// Validate checks the field values on GetUnitsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUnitsRequestMultiError, or nil if none found.
func (m *GetUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUnitsRequestMultiError(errors)
	}

	return nil
}

// GetUnitsRequestMultiError is an error wrapping multiple validation errors
// returned by GetUnitsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnitsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnitsRequestMultiError) AllErrors() []error { return m }

// GetUnitsRequestValidationError is the validation error returned by
// GetUnitsRequest.Validate if the designated constraints aren't met.
type GetUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnitsRequestValidationError) ErrorName() string { return "GetUnitsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnitsRequestValidationError{}

// Validate checks the field values on GetUnitsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUnitsResponseMultiError, or nil if none found.
func (m *GetUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUnitsResponseValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUnitsResponseValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUnitsResponseValidationError{
					field:  fmt.Sprintf("Units[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUnitsResponseMultiError(errors)
	}

	return nil
}

// GetUnitsResponseMultiError is an error wrapping multiple validation errors
// returned by GetUnitsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnitsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnitsResponseMultiError) AllErrors() []error { return m }

// GetUnitsResponseValidationError is the validation error returned by
// GetUnitsResponse.Validate if the designated constraints aren't met.
type GetUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnitsResponseValidationError) ErrorName() string { return "GetUnitsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnitsResponseValidationError{}

// Validate checks the field values on GetUnitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUnitRequestMultiError,
// or nil if none found.
func (m *GetUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUnitRequestMultiError(errors)
	}

	return nil
}

// GetUnitRequestMultiError is an error wrapping multiple validation errors
// returned by GetUnitRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnitRequestMultiError) AllErrors() []error { return m }

// GetUnitRequestValidationError is the validation error returned by
// GetUnitRequest.Validate if the designated constraints aren't met.
type GetUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnitRequestValidationError) ErrorName() string { return "GetUnitRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnitRequestValidationError{}

// Validate checks the field values on GetUnitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUnitResponseMultiError, or nil if none found.
func (m *GetUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUnitResponseValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUnitResponseValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUnitResponseValidationError{
				field:  "Unit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUnitResponseMultiError(errors)
	}

	return nil
}

// GetUnitResponseMultiError is an error wrapping multiple validation errors
// returned by GetUnitResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnitResponseMultiError) AllErrors() []error { return m }

// GetUnitResponseValidationError is the validation error returned by
// GetUnitResponse.Validate if the designated constraints aren't met.
type GetUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnitResponseValidationError) ErrorName() string { return "GetUnitResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnitResponseValidationError{}

// Validate checks the field values on CreateUnitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUnitRequestMultiError, or nil if none found.
func (m *CreateUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateUnitRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUnitRequestMultiError(errors)
	}

	return nil
}

// CreateUnitRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUnitRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUnitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUnitRequestMultiError) AllErrors() []error { return m }

// CreateUnitRequestValidationError is the validation error returned by
// CreateUnitRequest.Validate if the designated constraints aren't met.
type CreateUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUnitRequestValidationError) ErrorName() string {
	return "CreateUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUnitRequestValidationError{}

// Validate checks the field values on CreateUnitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUnitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUnitResponseMultiError, or nil if none found.
func (m *CreateUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateUnitResponseMultiError(errors)
	}

	return nil
}

// CreateUnitResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUnitResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUnitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUnitResponseMultiError) AllErrors() []error { return m }

// CreateUnitResponseValidationError is the validation error returned by
// CreateUnitResponse.Validate if the designated constraints aren't met.
type CreateUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUnitResponseValidationError) ErrorName() string {
	return "CreateUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUnitResponseValidationError{}

// Validate checks the field values on CreateVocalPatternRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVocalPatternRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVocalPatternRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVocalPatternRequestMultiError, or nil if none found.
func (m *CreateVocalPatternRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVocalPatternRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSongId() < 1 {
		err := CreateVocalPatternRequestValidationError{
			field:  "SongId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateVocalPatternRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSingerIds() {
		_, _ = idx, item

		if item < 1 {
			err := CreateVocalPatternRequestValidationError{
				field:  fmt.Sprintf("SingerIds[%v]", idx),
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetSingerPositions() {
		_, _ = idx, item

		if item < 1 {
			err := CreateVocalPatternRequestValidationError{
				field:  fmt.Sprintf("SingerPositions[%v]", idx),
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetUnitIds() {
		_, _ = idx, item

		if item < 1 {
			err := CreateVocalPatternRequestValidationError{
				field:  fmt.Sprintf("UnitIds[%v]", idx),
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateVocalPatternRequestMultiError(errors)
	}

	return nil
}

// CreateVocalPatternRequestMultiError is an error wrapping multiple validation
// errors returned by CreateVocalPatternRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateVocalPatternRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVocalPatternRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVocalPatternRequestMultiError) AllErrors() []error { return m }

// CreateVocalPatternRequestValidationError is the validation error returned by
// CreateVocalPatternRequest.Validate if the designated constraints aren't met.
type CreateVocalPatternRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVocalPatternRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVocalPatternRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVocalPatternRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVocalPatternRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVocalPatternRequestValidationError) ErrorName() string {
	return "CreateVocalPatternRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVocalPatternRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVocalPatternRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVocalPatternRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVocalPatternRequestValidationError{}

// Validate checks the field values on CreateVocalPatternResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVocalPatternResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVocalPatternResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVocalPatternResponseMultiError, or nil if none found.
func (m *CreateVocalPatternResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVocalPatternResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateVocalPatternResponseMultiError(errors)
	}

	return nil
}

// CreateVocalPatternResponseMultiError is an error wrapping multiple
// validation errors returned by CreateVocalPatternResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateVocalPatternResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVocalPatternResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVocalPatternResponseMultiError) AllErrors() []error { return m }

// CreateVocalPatternResponseValidationError is the validation error returned
// by CreateVocalPatternResponse.Validate if the designated constraints aren't met.
type CreateVocalPatternResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVocalPatternResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVocalPatternResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVocalPatternResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVocalPatternResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVocalPatternResponseValidationError) ErrorName() string {
	return "CreateVocalPatternResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVocalPatternResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVocalPatternResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVocalPatternResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVocalPatternResponseValidationError{}

// Validate checks the field values on GetSongsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSongsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSongsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSongsRequestMultiError, or nil if none found.
func (m *GetSongsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSongsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSongsRequestMultiError(errors)
	}

	return nil
}

// GetSongsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSongsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSongsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSongsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSongsRequestMultiError) AllErrors() []error { return m }

// GetSongsRequestValidationError is the validation error returned by
// GetSongsRequest.Validate if the designated constraints aren't met.
type GetSongsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSongsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSongsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSongsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSongsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSongsRequestValidationError) ErrorName() string { return "GetSongsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSongsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSongsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSongsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSongsRequestValidationError{}

// Validate checks the field values on GetSongsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSongsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSongsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSongsResponseMultiError, or nil if none found.
func (m *GetSongsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSongsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSongs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSongsResponseValidationError{
						field:  fmt.Sprintf("Songs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSongsResponseValidationError{
						field:  fmt.Sprintf("Songs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSongsResponseValidationError{
					field:  fmt.Sprintf("Songs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSongsResponseMultiError(errors)
	}

	return nil
}

// GetSongsResponseMultiError is an error wrapping multiple validation errors
// returned by GetSongsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSongsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSongsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSongsResponseMultiError) AllErrors() []error { return m }

// GetSongsResponseValidationError is the validation error returned by
// GetSongsResponse.Validate if the designated constraints aren't met.
type GetSongsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSongsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSongsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSongsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSongsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSongsResponseValidationError) ErrorName() string { return "GetSongsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSongsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSongsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSongsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSongsResponseValidationError{}

// Validate checks the field values on GetSongRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSongRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSongRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSongRequestMultiError,
// or nil if none found.
func (m *GetSongRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSongRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSongRequestMultiError(errors)
	}

	return nil
}

// GetSongRequestMultiError is an error wrapping multiple validation errors
// returned by GetSongRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSongRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSongRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSongRequestMultiError) AllErrors() []error { return m }

// GetSongRequestValidationError is the validation error returned by
// GetSongRequest.Validate if the designated constraints aren't met.
type GetSongRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSongRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSongRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSongRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSongRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSongRequestValidationError) ErrorName() string { return "GetSongRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSongRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSongRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSongRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSongRequestValidationError{}

// Validate checks the field values on GetSongResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSongResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSongResponseMultiError, or nil if none found.
func (m *GetSongResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSongResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSong() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSongResponseValidationError{
						field:  fmt.Sprintf("Song[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSongResponseValidationError{
						field:  fmt.Sprintf("Song[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSongResponseValidationError{
					field:  fmt.Sprintf("Song[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSongResponseMultiError(errors)
	}

	return nil
}

// GetSongResponseMultiError is an error wrapping multiple validation errors
// returned by GetSongResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSongResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSongResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSongResponseMultiError) AllErrors() []error { return m }

// GetSongResponseValidationError is the validation error returned by
// GetSongResponse.Validate if the designated constraints aren't met.
type GetSongResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSongResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSongResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSongResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSongResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSongResponseValidationError) ErrorName() string { return "GetSongResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSongResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSongResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSongResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSongResponseValidationError{}

// Validate checks the field values on CreateSongRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSongRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSongRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSongRequestMultiError, or nil if none found.
func (m *CreateSongRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSongRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateSongRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKana()); l < 1 || l > 255 {
		err := CreateSongRequestValidationError{
			field:  "Kana",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLyricsId() < 1 {
		err := CreateSongRequestValidationError{
			field:  "LyricsId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMusicId() < 1 {
		err := CreateSongRequestValidationError{
			field:  "MusicId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetArrangementId() < 1 {
		err := CreateSongRequestValidationError{
			field:  "ArrangementId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetThumbnail()) < 1 {
		err := CreateSongRequestValidationError{
			field:  "Thumbnail",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOriginalVideo()) < 1 {
		err := CreateSongRequestValidationError{
			field:  "OriginalVideo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReleaseTime() == nil {
		err := CreateSongRequestValidationError{
			field:  "ReleaseTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Deleted

	for idx, item := range m.GetMusicVideoTypes() {
		_, _ = idx, item

		if _, ok := enums.MusicVideoType_name[int32(item)]; !ok {
			err := CreateSongRequestValidationError{
				field:  fmt.Sprintf("MusicVideoTypes[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateSongRequestMultiError(errors)
	}

	return nil
}

// CreateSongRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSongRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSongRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSongRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSongRequestMultiError) AllErrors() []error { return m }

// CreateSongRequestValidationError is the validation error returned by
// CreateSongRequest.Validate if the designated constraints aren't met.
type CreateSongRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSongRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSongRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSongRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSongRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSongRequestValidationError) ErrorName() string {
	return "CreateSongRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSongRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSongRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSongRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSongRequestValidationError{}

// Validate checks the field values on CreateSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSongResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSongResponseMultiError, or nil if none found.
func (m *CreateSongResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSongResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSongResponseMultiError(errors)
	}

	return nil
}

// CreateSongResponseMultiError is an error wrapping multiple validation errors
// returned by CreateSongResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateSongResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSongResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSongResponseMultiError) AllErrors() []error { return m }

// CreateSongResponseValidationError is the validation error returned by
// CreateSongResponse.Validate if the designated constraints aren't met.
type CreateSongResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSongResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSongResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSongResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSongResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSongResponseValidationError) ErrorName() string {
	return "CreateSongResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSongResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSongResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSongResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSongResponseValidationError{}

// Validate checks the field values on GetChartsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChartsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChartsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChartsRequestMultiError, or nil if none found.
func (m *GetChartsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChartsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetChartsRequestMultiError(errors)
	}

	return nil
}

// GetChartsRequestMultiError is an error wrapping multiple validation errors
// returned by GetChartsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetChartsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChartsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChartsRequestMultiError) AllErrors() []error { return m }

// GetChartsRequestValidationError is the validation error returned by
// GetChartsRequest.Validate if the designated constraints aren't met.
type GetChartsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChartsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChartsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChartsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChartsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChartsRequestValidationError) ErrorName() string { return "GetChartsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetChartsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChartsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChartsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChartsRequestValidationError{}

// Validate checks the field values on GetChartsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChartsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChartsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChartsResponseMultiError, or nil if none found.
func (m *GetChartsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChartsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCharts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChartsResponseValidationError{
						field:  fmt.Sprintf("Charts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChartsResponseValidationError{
						field:  fmt.Sprintf("Charts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChartsResponseValidationError{
					field:  fmt.Sprintf("Charts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChartsResponseMultiError(errors)
	}

	return nil
}

// GetChartsResponseMultiError is an error wrapping multiple validation errors
// returned by GetChartsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetChartsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChartsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChartsResponseMultiError) AllErrors() []error { return m }

// GetChartsResponseValidationError is the validation error returned by
// GetChartsResponse.Validate if the designated constraints aren't met.
type GetChartsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChartsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChartsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChartsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChartsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChartsResponseValidationError) ErrorName() string {
	return "GetChartsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChartsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChartsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChartsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChartsResponseValidationError{}

// Validate checks the field values on GetChartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChartRequestMultiError, or nil if none found.
func (m *GetChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetChartRequestMultiError(errors)
	}

	return nil
}

// GetChartRequestMultiError is an error wrapping multiple validation errors
// returned by GetChartRequest.ValidateAll() if the designated constraints
// aren't met.
type GetChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChartRequestMultiError) AllErrors() []error { return m }

// GetChartRequestValidationError is the validation error returned by
// GetChartRequest.Validate if the designated constraints aren't met.
type GetChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChartRequestValidationError) ErrorName() string { return "GetChartRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChartRequestValidationError{}

// Validate checks the field values on GetChartResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChartResponseMultiError, or nil if none found.
func (m *GetChartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChart() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChartResponseValidationError{
						field:  fmt.Sprintf("Chart[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChartResponseValidationError{
						field:  fmt.Sprintf("Chart[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChartResponseValidationError{
					field:  fmt.Sprintf("Chart[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChartResponseMultiError(errors)
	}

	return nil
}

// GetChartResponseMultiError is an error wrapping multiple validation errors
// returned by GetChartResponse.ValidateAll() if the designated constraints
// aren't met.
type GetChartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChartResponseMultiError) AllErrors() []error { return m }

// GetChartResponseValidationError is the validation error returned by
// GetChartResponse.Validate if the designated constraints aren't met.
type GetChartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChartResponseValidationError) ErrorName() string { return "GetChartResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetChartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChartResponseValidationError{}

// Validate checks the field values on CreateChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChartRequestMultiError, or nil if none found.
func (m *CreateChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSongId() < 1 {
		err := CreateChartRequestValidationError{
			field:  "SongId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := enums.DifficultyType_name[int32(m.GetDifficultyType())]; !ok {
		err := CreateChartRequestValidationError{
			field:  "DifficultyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLevel(); val < 1 || val >= 100 {
		err := CreateChartRequestValidationError{
			field:  "Level",
			reason: "value must be inside range [1, 100)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetChartViewLink()) < 1 {
		err := CreateChartRequestValidationError{
			field:  "ChartViewLink",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateChartRequestMultiError(errors)
	}

	return nil
}

// CreateChartRequestMultiError is an error wrapping multiple validation errors
// returned by CreateChartRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChartRequestMultiError) AllErrors() []error { return m }

// CreateChartRequestValidationError is the validation error returned by
// CreateChartRequest.Validate if the designated constraints aren't met.
type CreateChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChartRequestValidationError) ErrorName() string {
	return "CreateChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChartRequestValidationError{}

// Validate checks the field values on CreateChartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChartResponseMultiError, or nil if none found.
func (m *CreateChartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateChartResponseMultiError(errors)
	}

	return nil
}

// CreateChartResponseMultiError is an error wrapping multiple validation
// errors returned by CreateChartResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateChartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChartResponseMultiError) AllErrors() []error { return m }

// CreateChartResponseValidationError is the validation error returned by
// CreateChartResponse.Validate if the designated constraints aren't met.
type CreateChartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChartResponseValidationError) ErrorName() string {
	return "CreateChartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChartResponseValidationError{}
