// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mylist/v1/mylist.proto

package mylistv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Shakkuuu/sekai-songs-mylist/internal/gen/mylist/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MyListServiceName is the fully-qualified name of the MyListService service.
	MyListServiceName = "mylist.v1.MyListService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MyListServiceGetMyListsByUserIDProcedure is the fully-qualified name of the MyListService's
	// GetMyListsByUserID RPC.
	MyListServiceGetMyListsByUserIDProcedure = "/mylist.v1.MyListService/GetMyListsByUserID"
	// MyListServiceCreateMyListProcedure is the fully-qualified name of the MyListService's
	// CreateMyList RPC.
	MyListServiceCreateMyListProcedure = "/mylist.v1.MyListService/CreateMyList"
	// MyListServiceChangeMyListNameProcedure is the fully-qualified name of the MyListService's
	// ChangeMyListName RPC.
	MyListServiceChangeMyListNameProcedure = "/mylist.v1.MyListService/ChangeMyListName"
	// MyListServiceChangeMyListPositionProcedure is the fully-qualified name of the MyListService's
	// ChangeMyListPosition RPC.
	MyListServiceChangeMyListPositionProcedure = "/mylist.v1.MyListService/ChangeMyListPosition"
	// MyListServiceDeleteMyListProcedure is the fully-qualified name of the MyListService's
	// DeleteMyList RPC.
	MyListServiceDeleteMyListProcedure = "/mylist.v1.MyListService/DeleteMyList"
	// MyListServiceGetMyListChartsByMyListIDProcedure is the fully-qualified name of the
	// MyListService's GetMyListChartsByMyListID RPC.
	MyListServiceGetMyListChartsByMyListIDProcedure = "/mylist.v1.MyListService/GetMyListChartsByMyListID"
	// MyListServiceGetMyListChartByIDProcedure is the fully-qualified name of the MyListService's
	// GetMyListChartByID RPC.
	MyListServiceGetMyListChartByIDProcedure = "/mylist.v1.MyListService/GetMyListChartByID"
	// MyListServiceAddMyListChartProcedure is the fully-qualified name of the MyListService's
	// AddMyListChart RPC.
	MyListServiceAddMyListChartProcedure = "/mylist.v1.MyListService/AddMyListChart"
	// MyListServiceChangeMyListChartClearTypeProcedure is the fully-qualified name of the
	// MyListService's ChangeMyListChartClearType RPC.
	MyListServiceChangeMyListChartClearTypeProcedure = "/mylist.v1.MyListService/ChangeMyListChartClearType"
	// MyListServiceChangeMyListChartMemoProcedure is the fully-qualified name of the MyListService's
	// ChangeMyListChartMemo RPC.
	MyListServiceChangeMyListChartMemoProcedure = "/mylist.v1.MyListService/ChangeMyListChartMemo"
	// MyListServiceDeleteMyListChartProcedure is the fully-qualified name of the MyListService's
	// DeleteMyListChart RPC.
	MyListServiceDeleteMyListChartProcedure = "/mylist.v1.MyListService/DeleteMyListChart"
	// MyListServiceGetMyListChartAttachmentsByMyListChartIDProcedure is the fully-qualified name of the
	// MyListService's GetMyListChartAttachmentsByMyListChartID RPC.
	MyListServiceGetMyListChartAttachmentsByMyListChartIDProcedure = "/mylist.v1.MyListService/GetMyListChartAttachmentsByMyListChartID"
	// MyListServiceAddMyListChartAttachmentProcedure is the fully-qualified name of the MyListService's
	// AddMyListChartAttachment RPC.
	MyListServiceAddMyListChartAttachmentProcedure = "/mylist.v1.MyListService/AddMyListChartAttachment"
	// MyListServiceDeleteMyListChartAttachmentProcedure is the fully-qualified name of the
	// MyListService's DeleteMyListChartAttachment RPC.
	MyListServiceDeleteMyListChartAttachmentProcedure = "/mylist.v1.MyListService/DeleteMyListChartAttachment"
)

// MyListServiceClient is a client for the mylist.v1.MyListService service.
type MyListServiceClient interface {
	GetMyListsByUserID(context.Context, *connect.Request[v1.GetMyListsByUserIDRequest]) (*connect.Response[v1.GetMyListsByUserIDResponse], error)
	CreateMyList(context.Context, *connect.Request[v1.CreateMyListRequest]) (*connect.Response[v1.CreateMyListResponse], error)
	ChangeMyListName(context.Context, *connect.Request[v1.ChangeMyListNameRequest]) (*connect.Response[v1.ChangeMyListNameResponse], error)
	ChangeMyListPosition(context.Context, *connect.Request[v1.ChangeMyListPositionRequest]) (*connect.Response[v1.ChangeMyListPositionResponse], error)
	DeleteMyList(context.Context, *connect.Request[v1.DeleteMyListRequest]) (*connect.Response[v1.DeleteMyListResponse], error)
	GetMyListChartsByMyListID(context.Context, *connect.Request[v1.GetMyListChartsByMyListIDRequest]) (*connect.Response[v1.GetMyListChartsByMyListIDResponse], error)
	GetMyListChartByID(context.Context, *connect.Request[v1.GetMyListChartByIDRequest]) (*connect.Response[v1.GetMyListChartByIDResponse], error)
	AddMyListChart(context.Context, *connect.Request[v1.AddMyListChartRequest]) (*connect.Response[v1.AddMyListChartResponse], error)
	ChangeMyListChartClearType(context.Context, *connect.Request[v1.ChangeMyListChartClearTypeRequest]) (*connect.Response[v1.ChangeMyListChartClearTypeResponse], error)
	ChangeMyListChartMemo(context.Context, *connect.Request[v1.ChangeMyListChartMemoRequest]) (*connect.Response[v1.ChangeMyListChartMemoResponse], error)
	DeleteMyListChart(context.Context, *connect.Request[v1.DeleteMyListChartRequest]) (*connect.Response[v1.DeleteMyListChartResponse], error)
	GetMyListChartAttachmentsByMyListChartID(context.Context, *connect.Request[v1.GetMyListChartAttachmentsByMyListChartIDRequest]) (*connect.Response[v1.GetMyListChartAttachmentsByMyListChartIDResponse], error)
	AddMyListChartAttachment(context.Context, *connect.Request[v1.AddMyListChartAttachmentRequest]) (*connect.Response[v1.AddMyListChartAttachmentResponse], error)
	DeleteMyListChartAttachment(context.Context, *connect.Request[v1.DeleteMyListChartAttachmentRequest]) (*connect.Response[v1.DeleteMyListChartAttachmentResponse], error)
}

// NewMyListServiceClient constructs a client for the mylist.v1.MyListService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMyListServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MyListServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	myListServiceMethods := v1.File_mylist_v1_mylist_proto.Services().ByName("MyListService").Methods()
	return &myListServiceClient{
		getMyListsByUserID: connect.NewClient[v1.GetMyListsByUserIDRequest, v1.GetMyListsByUserIDResponse](
			httpClient,
			baseURL+MyListServiceGetMyListsByUserIDProcedure,
			connect.WithSchema(myListServiceMethods.ByName("GetMyListsByUserID")),
			connect.WithClientOptions(opts...),
		),
		createMyList: connect.NewClient[v1.CreateMyListRequest, v1.CreateMyListResponse](
			httpClient,
			baseURL+MyListServiceCreateMyListProcedure,
			connect.WithSchema(myListServiceMethods.ByName("CreateMyList")),
			connect.WithClientOptions(opts...),
		),
		changeMyListName: connect.NewClient[v1.ChangeMyListNameRequest, v1.ChangeMyListNameResponse](
			httpClient,
			baseURL+MyListServiceChangeMyListNameProcedure,
			connect.WithSchema(myListServiceMethods.ByName("ChangeMyListName")),
			connect.WithClientOptions(opts...),
		),
		changeMyListPosition: connect.NewClient[v1.ChangeMyListPositionRequest, v1.ChangeMyListPositionResponse](
			httpClient,
			baseURL+MyListServiceChangeMyListPositionProcedure,
			connect.WithSchema(myListServiceMethods.ByName("ChangeMyListPosition")),
			connect.WithClientOptions(opts...),
		),
		deleteMyList: connect.NewClient[v1.DeleteMyListRequest, v1.DeleteMyListResponse](
			httpClient,
			baseURL+MyListServiceDeleteMyListProcedure,
			connect.WithSchema(myListServiceMethods.ByName("DeleteMyList")),
			connect.WithClientOptions(opts...),
		),
		getMyListChartsByMyListID: connect.NewClient[v1.GetMyListChartsByMyListIDRequest, v1.GetMyListChartsByMyListIDResponse](
			httpClient,
			baseURL+MyListServiceGetMyListChartsByMyListIDProcedure,
			connect.WithSchema(myListServiceMethods.ByName("GetMyListChartsByMyListID")),
			connect.WithClientOptions(opts...),
		),
		getMyListChartByID: connect.NewClient[v1.GetMyListChartByIDRequest, v1.GetMyListChartByIDResponse](
			httpClient,
			baseURL+MyListServiceGetMyListChartByIDProcedure,
			connect.WithSchema(myListServiceMethods.ByName("GetMyListChartByID")),
			connect.WithClientOptions(opts...),
		),
		addMyListChart: connect.NewClient[v1.AddMyListChartRequest, v1.AddMyListChartResponse](
			httpClient,
			baseURL+MyListServiceAddMyListChartProcedure,
			connect.WithSchema(myListServiceMethods.ByName("AddMyListChart")),
			connect.WithClientOptions(opts...),
		),
		changeMyListChartClearType: connect.NewClient[v1.ChangeMyListChartClearTypeRequest, v1.ChangeMyListChartClearTypeResponse](
			httpClient,
			baseURL+MyListServiceChangeMyListChartClearTypeProcedure,
			connect.WithSchema(myListServiceMethods.ByName("ChangeMyListChartClearType")),
			connect.WithClientOptions(opts...),
		),
		changeMyListChartMemo: connect.NewClient[v1.ChangeMyListChartMemoRequest, v1.ChangeMyListChartMemoResponse](
			httpClient,
			baseURL+MyListServiceChangeMyListChartMemoProcedure,
			connect.WithSchema(myListServiceMethods.ByName("ChangeMyListChartMemo")),
			connect.WithClientOptions(opts...),
		),
		deleteMyListChart: connect.NewClient[v1.DeleteMyListChartRequest, v1.DeleteMyListChartResponse](
			httpClient,
			baseURL+MyListServiceDeleteMyListChartProcedure,
			connect.WithSchema(myListServiceMethods.ByName("DeleteMyListChart")),
			connect.WithClientOptions(opts...),
		),
		getMyListChartAttachmentsByMyListChartID: connect.NewClient[v1.GetMyListChartAttachmentsByMyListChartIDRequest, v1.GetMyListChartAttachmentsByMyListChartIDResponse](
			httpClient,
			baseURL+MyListServiceGetMyListChartAttachmentsByMyListChartIDProcedure,
			connect.WithSchema(myListServiceMethods.ByName("GetMyListChartAttachmentsByMyListChartID")),
			connect.WithClientOptions(opts...),
		),
		addMyListChartAttachment: connect.NewClient[v1.AddMyListChartAttachmentRequest, v1.AddMyListChartAttachmentResponse](
			httpClient,
			baseURL+MyListServiceAddMyListChartAttachmentProcedure,
			connect.WithSchema(myListServiceMethods.ByName("AddMyListChartAttachment")),
			connect.WithClientOptions(opts...),
		),
		deleteMyListChartAttachment: connect.NewClient[v1.DeleteMyListChartAttachmentRequest, v1.DeleteMyListChartAttachmentResponse](
			httpClient,
			baseURL+MyListServiceDeleteMyListChartAttachmentProcedure,
			connect.WithSchema(myListServiceMethods.ByName("DeleteMyListChartAttachment")),
			connect.WithClientOptions(opts...),
		),
	}
}

// myListServiceClient implements MyListServiceClient.
type myListServiceClient struct {
	getMyListsByUserID                       *connect.Client[v1.GetMyListsByUserIDRequest, v1.GetMyListsByUserIDResponse]
	createMyList                             *connect.Client[v1.CreateMyListRequest, v1.CreateMyListResponse]
	changeMyListName                         *connect.Client[v1.ChangeMyListNameRequest, v1.ChangeMyListNameResponse]
	changeMyListPosition                     *connect.Client[v1.ChangeMyListPositionRequest, v1.ChangeMyListPositionResponse]
	deleteMyList                             *connect.Client[v1.DeleteMyListRequest, v1.DeleteMyListResponse]
	getMyListChartsByMyListID                *connect.Client[v1.GetMyListChartsByMyListIDRequest, v1.GetMyListChartsByMyListIDResponse]
	getMyListChartByID                       *connect.Client[v1.GetMyListChartByIDRequest, v1.GetMyListChartByIDResponse]
	addMyListChart                           *connect.Client[v1.AddMyListChartRequest, v1.AddMyListChartResponse]
	changeMyListChartClearType               *connect.Client[v1.ChangeMyListChartClearTypeRequest, v1.ChangeMyListChartClearTypeResponse]
	changeMyListChartMemo                    *connect.Client[v1.ChangeMyListChartMemoRequest, v1.ChangeMyListChartMemoResponse]
	deleteMyListChart                        *connect.Client[v1.DeleteMyListChartRequest, v1.DeleteMyListChartResponse]
	getMyListChartAttachmentsByMyListChartID *connect.Client[v1.GetMyListChartAttachmentsByMyListChartIDRequest, v1.GetMyListChartAttachmentsByMyListChartIDResponse]
	addMyListChartAttachment                 *connect.Client[v1.AddMyListChartAttachmentRequest, v1.AddMyListChartAttachmentResponse]
	deleteMyListChartAttachment              *connect.Client[v1.DeleteMyListChartAttachmentRequest, v1.DeleteMyListChartAttachmentResponse]
}

// GetMyListsByUserID calls mylist.v1.MyListService.GetMyListsByUserID.
func (c *myListServiceClient) GetMyListsByUserID(ctx context.Context, req *connect.Request[v1.GetMyListsByUserIDRequest]) (*connect.Response[v1.GetMyListsByUserIDResponse], error) {
	return c.getMyListsByUserID.CallUnary(ctx, req)
}

// CreateMyList calls mylist.v1.MyListService.CreateMyList.
func (c *myListServiceClient) CreateMyList(ctx context.Context, req *connect.Request[v1.CreateMyListRequest]) (*connect.Response[v1.CreateMyListResponse], error) {
	return c.createMyList.CallUnary(ctx, req)
}

// ChangeMyListName calls mylist.v1.MyListService.ChangeMyListName.
func (c *myListServiceClient) ChangeMyListName(ctx context.Context, req *connect.Request[v1.ChangeMyListNameRequest]) (*connect.Response[v1.ChangeMyListNameResponse], error) {
	return c.changeMyListName.CallUnary(ctx, req)
}

// ChangeMyListPosition calls mylist.v1.MyListService.ChangeMyListPosition.
func (c *myListServiceClient) ChangeMyListPosition(ctx context.Context, req *connect.Request[v1.ChangeMyListPositionRequest]) (*connect.Response[v1.ChangeMyListPositionResponse], error) {
	return c.changeMyListPosition.CallUnary(ctx, req)
}

// DeleteMyList calls mylist.v1.MyListService.DeleteMyList.
func (c *myListServiceClient) DeleteMyList(ctx context.Context, req *connect.Request[v1.DeleteMyListRequest]) (*connect.Response[v1.DeleteMyListResponse], error) {
	return c.deleteMyList.CallUnary(ctx, req)
}

// GetMyListChartsByMyListID calls mylist.v1.MyListService.GetMyListChartsByMyListID.
func (c *myListServiceClient) GetMyListChartsByMyListID(ctx context.Context, req *connect.Request[v1.GetMyListChartsByMyListIDRequest]) (*connect.Response[v1.GetMyListChartsByMyListIDResponse], error) {
	return c.getMyListChartsByMyListID.CallUnary(ctx, req)
}

// GetMyListChartByID calls mylist.v1.MyListService.GetMyListChartByID.
func (c *myListServiceClient) GetMyListChartByID(ctx context.Context, req *connect.Request[v1.GetMyListChartByIDRequest]) (*connect.Response[v1.GetMyListChartByIDResponse], error) {
	return c.getMyListChartByID.CallUnary(ctx, req)
}

// AddMyListChart calls mylist.v1.MyListService.AddMyListChart.
func (c *myListServiceClient) AddMyListChart(ctx context.Context, req *connect.Request[v1.AddMyListChartRequest]) (*connect.Response[v1.AddMyListChartResponse], error) {
	return c.addMyListChart.CallUnary(ctx, req)
}

// ChangeMyListChartClearType calls mylist.v1.MyListService.ChangeMyListChartClearType.
func (c *myListServiceClient) ChangeMyListChartClearType(ctx context.Context, req *connect.Request[v1.ChangeMyListChartClearTypeRequest]) (*connect.Response[v1.ChangeMyListChartClearTypeResponse], error) {
	return c.changeMyListChartClearType.CallUnary(ctx, req)
}

// ChangeMyListChartMemo calls mylist.v1.MyListService.ChangeMyListChartMemo.
func (c *myListServiceClient) ChangeMyListChartMemo(ctx context.Context, req *connect.Request[v1.ChangeMyListChartMemoRequest]) (*connect.Response[v1.ChangeMyListChartMemoResponse], error) {
	return c.changeMyListChartMemo.CallUnary(ctx, req)
}

// DeleteMyListChart calls mylist.v1.MyListService.DeleteMyListChart.
func (c *myListServiceClient) DeleteMyListChart(ctx context.Context, req *connect.Request[v1.DeleteMyListChartRequest]) (*connect.Response[v1.DeleteMyListChartResponse], error) {
	return c.deleteMyListChart.CallUnary(ctx, req)
}

// GetMyListChartAttachmentsByMyListChartID calls
// mylist.v1.MyListService.GetMyListChartAttachmentsByMyListChartID.
func (c *myListServiceClient) GetMyListChartAttachmentsByMyListChartID(ctx context.Context, req *connect.Request[v1.GetMyListChartAttachmentsByMyListChartIDRequest]) (*connect.Response[v1.GetMyListChartAttachmentsByMyListChartIDResponse], error) {
	return c.getMyListChartAttachmentsByMyListChartID.CallUnary(ctx, req)
}

// AddMyListChartAttachment calls mylist.v1.MyListService.AddMyListChartAttachment.
func (c *myListServiceClient) AddMyListChartAttachment(ctx context.Context, req *connect.Request[v1.AddMyListChartAttachmentRequest]) (*connect.Response[v1.AddMyListChartAttachmentResponse], error) {
	return c.addMyListChartAttachment.CallUnary(ctx, req)
}

// DeleteMyListChartAttachment calls mylist.v1.MyListService.DeleteMyListChartAttachment.
func (c *myListServiceClient) DeleteMyListChartAttachment(ctx context.Context, req *connect.Request[v1.DeleteMyListChartAttachmentRequest]) (*connect.Response[v1.DeleteMyListChartAttachmentResponse], error) {
	return c.deleteMyListChartAttachment.CallUnary(ctx, req)
}

// MyListServiceHandler is an implementation of the mylist.v1.MyListService service.
type MyListServiceHandler interface {
	GetMyListsByUserID(context.Context, *connect.Request[v1.GetMyListsByUserIDRequest]) (*connect.Response[v1.GetMyListsByUserIDResponse], error)
	CreateMyList(context.Context, *connect.Request[v1.CreateMyListRequest]) (*connect.Response[v1.CreateMyListResponse], error)
	ChangeMyListName(context.Context, *connect.Request[v1.ChangeMyListNameRequest]) (*connect.Response[v1.ChangeMyListNameResponse], error)
	ChangeMyListPosition(context.Context, *connect.Request[v1.ChangeMyListPositionRequest]) (*connect.Response[v1.ChangeMyListPositionResponse], error)
	DeleteMyList(context.Context, *connect.Request[v1.DeleteMyListRequest]) (*connect.Response[v1.DeleteMyListResponse], error)
	GetMyListChartsByMyListID(context.Context, *connect.Request[v1.GetMyListChartsByMyListIDRequest]) (*connect.Response[v1.GetMyListChartsByMyListIDResponse], error)
	GetMyListChartByID(context.Context, *connect.Request[v1.GetMyListChartByIDRequest]) (*connect.Response[v1.GetMyListChartByIDResponse], error)
	AddMyListChart(context.Context, *connect.Request[v1.AddMyListChartRequest]) (*connect.Response[v1.AddMyListChartResponse], error)
	ChangeMyListChartClearType(context.Context, *connect.Request[v1.ChangeMyListChartClearTypeRequest]) (*connect.Response[v1.ChangeMyListChartClearTypeResponse], error)
	ChangeMyListChartMemo(context.Context, *connect.Request[v1.ChangeMyListChartMemoRequest]) (*connect.Response[v1.ChangeMyListChartMemoResponse], error)
	DeleteMyListChart(context.Context, *connect.Request[v1.DeleteMyListChartRequest]) (*connect.Response[v1.DeleteMyListChartResponse], error)
	GetMyListChartAttachmentsByMyListChartID(context.Context, *connect.Request[v1.GetMyListChartAttachmentsByMyListChartIDRequest]) (*connect.Response[v1.GetMyListChartAttachmentsByMyListChartIDResponse], error)
	AddMyListChartAttachment(context.Context, *connect.Request[v1.AddMyListChartAttachmentRequest]) (*connect.Response[v1.AddMyListChartAttachmentResponse], error)
	DeleteMyListChartAttachment(context.Context, *connect.Request[v1.DeleteMyListChartAttachmentRequest]) (*connect.Response[v1.DeleteMyListChartAttachmentResponse], error)
}

// NewMyListServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMyListServiceHandler(svc MyListServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	myListServiceMethods := v1.File_mylist_v1_mylist_proto.Services().ByName("MyListService").Methods()
	myListServiceGetMyListsByUserIDHandler := connect.NewUnaryHandler(
		MyListServiceGetMyListsByUserIDProcedure,
		svc.GetMyListsByUserID,
		connect.WithSchema(myListServiceMethods.ByName("GetMyListsByUserID")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceCreateMyListHandler := connect.NewUnaryHandler(
		MyListServiceCreateMyListProcedure,
		svc.CreateMyList,
		connect.WithSchema(myListServiceMethods.ByName("CreateMyList")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceChangeMyListNameHandler := connect.NewUnaryHandler(
		MyListServiceChangeMyListNameProcedure,
		svc.ChangeMyListName,
		connect.WithSchema(myListServiceMethods.ByName("ChangeMyListName")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceChangeMyListPositionHandler := connect.NewUnaryHandler(
		MyListServiceChangeMyListPositionProcedure,
		svc.ChangeMyListPosition,
		connect.WithSchema(myListServiceMethods.ByName("ChangeMyListPosition")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceDeleteMyListHandler := connect.NewUnaryHandler(
		MyListServiceDeleteMyListProcedure,
		svc.DeleteMyList,
		connect.WithSchema(myListServiceMethods.ByName("DeleteMyList")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceGetMyListChartsByMyListIDHandler := connect.NewUnaryHandler(
		MyListServiceGetMyListChartsByMyListIDProcedure,
		svc.GetMyListChartsByMyListID,
		connect.WithSchema(myListServiceMethods.ByName("GetMyListChartsByMyListID")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceGetMyListChartByIDHandler := connect.NewUnaryHandler(
		MyListServiceGetMyListChartByIDProcedure,
		svc.GetMyListChartByID,
		connect.WithSchema(myListServiceMethods.ByName("GetMyListChartByID")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceAddMyListChartHandler := connect.NewUnaryHandler(
		MyListServiceAddMyListChartProcedure,
		svc.AddMyListChart,
		connect.WithSchema(myListServiceMethods.ByName("AddMyListChart")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceChangeMyListChartClearTypeHandler := connect.NewUnaryHandler(
		MyListServiceChangeMyListChartClearTypeProcedure,
		svc.ChangeMyListChartClearType,
		connect.WithSchema(myListServiceMethods.ByName("ChangeMyListChartClearType")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceChangeMyListChartMemoHandler := connect.NewUnaryHandler(
		MyListServiceChangeMyListChartMemoProcedure,
		svc.ChangeMyListChartMemo,
		connect.WithSchema(myListServiceMethods.ByName("ChangeMyListChartMemo")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceDeleteMyListChartHandler := connect.NewUnaryHandler(
		MyListServiceDeleteMyListChartProcedure,
		svc.DeleteMyListChart,
		connect.WithSchema(myListServiceMethods.ByName("DeleteMyListChart")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceGetMyListChartAttachmentsByMyListChartIDHandler := connect.NewUnaryHandler(
		MyListServiceGetMyListChartAttachmentsByMyListChartIDProcedure,
		svc.GetMyListChartAttachmentsByMyListChartID,
		connect.WithSchema(myListServiceMethods.ByName("GetMyListChartAttachmentsByMyListChartID")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceAddMyListChartAttachmentHandler := connect.NewUnaryHandler(
		MyListServiceAddMyListChartAttachmentProcedure,
		svc.AddMyListChartAttachment,
		connect.WithSchema(myListServiceMethods.ByName("AddMyListChartAttachment")),
		connect.WithHandlerOptions(opts...),
	)
	myListServiceDeleteMyListChartAttachmentHandler := connect.NewUnaryHandler(
		MyListServiceDeleteMyListChartAttachmentProcedure,
		svc.DeleteMyListChartAttachment,
		connect.WithSchema(myListServiceMethods.ByName("DeleteMyListChartAttachment")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mylist.v1.MyListService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MyListServiceGetMyListsByUserIDProcedure:
			myListServiceGetMyListsByUserIDHandler.ServeHTTP(w, r)
		case MyListServiceCreateMyListProcedure:
			myListServiceCreateMyListHandler.ServeHTTP(w, r)
		case MyListServiceChangeMyListNameProcedure:
			myListServiceChangeMyListNameHandler.ServeHTTP(w, r)
		case MyListServiceChangeMyListPositionProcedure:
			myListServiceChangeMyListPositionHandler.ServeHTTP(w, r)
		case MyListServiceDeleteMyListProcedure:
			myListServiceDeleteMyListHandler.ServeHTTP(w, r)
		case MyListServiceGetMyListChartsByMyListIDProcedure:
			myListServiceGetMyListChartsByMyListIDHandler.ServeHTTP(w, r)
		case MyListServiceGetMyListChartByIDProcedure:
			myListServiceGetMyListChartByIDHandler.ServeHTTP(w, r)
		case MyListServiceAddMyListChartProcedure:
			myListServiceAddMyListChartHandler.ServeHTTP(w, r)
		case MyListServiceChangeMyListChartClearTypeProcedure:
			myListServiceChangeMyListChartClearTypeHandler.ServeHTTP(w, r)
		case MyListServiceChangeMyListChartMemoProcedure:
			myListServiceChangeMyListChartMemoHandler.ServeHTTP(w, r)
		case MyListServiceDeleteMyListChartProcedure:
			myListServiceDeleteMyListChartHandler.ServeHTTP(w, r)
		case MyListServiceGetMyListChartAttachmentsByMyListChartIDProcedure:
			myListServiceGetMyListChartAttachmentsByMyListChartIDHandler.ServeHTTP(w, r)
		case MyListServiceAddMyListChartAttachmentProcedure:
			myListServiceAddMyListChartAttachmentHandler.ServeHTTP(w, r)
		case MyListServiceDeleteMyListChartAttachmentProcedure:
			myListServiceDeleteMyListChartAttachmentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMyListServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMyListServiceHandler struct{}

func (UnimplementedMyListServiceHandler) GetMyListsByUserID(context.Context, *connect.Request[v1.GetMyListsByUserIDRequest]) (*connect.Response[v1.GetMyListsByUserIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.GetMyListsByUserID is not implemented"))
}

func (UnimplementedMyListServiceHandler) CreateMyList(context.Context, *connect.Request[v1.CreateMyListRequest]) (*connect.Response[v1.CreateMyListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.CreateMyList is not implemented"))
}

func (UnimplementedMyListServiceHandler) ChangeMyListName(context.Context, *connect.Request[v1.ChangeMyListNameRequest]) (*connect.Response[v1.ChangeMyListNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.ChangeMyListName is not implemented"))
}

func (UnimplementedMyListServiceHandler) ChangeMyListPosition(context.Context, *connect.Request[v1.ChangeMyListPositionRequest]) (*connect.Response[v1.ChangeMyListPositionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.ChangeMyListPosition is not implemented"))
}

func (UnimplementedMyListServiceHandler) DeleteMyList(context.Context, *connect.Request[v1.DeleteMyListRequest]) (*connect.Response[v1.DeleteMyListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.DeleteMyList is not implemented"))
}

func (UnimplementedMyListServiceHandler) GetMyListChartsByMyListID(context.Context, *connect.Request[v1.GetMyListChartsByMyListIDRequest]) (*connect.Response[v1.GetMyListChartsByMyListIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.GetMyListChartsByMyListID is not implemented"))
}

func (UnimplementedMyListServiceHandler) GetMyListChartByID(context.Context, *connect.Request[v1.GetMyListChartByIDRequest]) (*connect.Response[v1.GetMyListChartByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.GetMyListChartByID is not implemented"))
}

func (UnimplementedMyListServiceHandler) AddMyListChart(context.Context, *connect.Request[v1.AddMyListChartRequest]) (*connect.Response[v1.AddMyListChartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.AddMyListChart is not implemented"))
}

func (UnimplementedMyListServiceHandler) ChangeMyListChartClearType(context.Context, *connect.Request[v1.ChangeMyListChartClearTypeRequest]) (*connect.Response[v1.ChangeMyListChartClearTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.ChangeMyListChartClearType is not implemented"))
}

func (UnimplementedMyListServiceHandler) ChangeMyListChartMemo(context.Context, *connect.Request[v1.ChangeMyListChartMemoRequest]) (*connect.Response[v1.ChangeMyListChartMemoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.ChangeMyListChartMemo is not implemented"))
}

func (UnimplementedMyListServiceHandler) DeleteMyListChart(context.Context, *connect.Request[v1.DeleteMyListChartRequest]) (*connect.Response[v1.DeleteMyListChartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.DeleteMyListChart is not implemented"))
}

func (UnimplementedMyListServiceHandler) GetMyListChartAttachmentsByMyListChartID(context.Context, *connect.Request[v1.GetMyListChartAttachmentsByMyListChartIDRequest]) (*connect.Response[v1.GetMyListChartAttachmentsByMyListChartIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.GetMyListChartAttachmentsByMyListChartID is not implemented"))
}

func (UnimplementedMyListServiceHandler) AddMyListChartAttachment(context.Context, *connect.Request[v1.AddMyListChartAttachmentRequest]) (*connect.Response[v1.AddMyListChartAttachmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.AddMyListChartAttachment is not implemented"))
}

func (UnimplementedMyListServiceHandler) DeleteMyListChartAttachment(context.Context, *connect.Request[v1.DeleteMyListChartAttachmentRequest]) (*connect.Response[v1.DeleteMyListChartAttachmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mylist.v1.MyListService.DeleteMyListChartAttachment is not implemented"))
}
