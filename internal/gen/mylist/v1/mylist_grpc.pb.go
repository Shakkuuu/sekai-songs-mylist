// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mylist/v1/mylist.proto

package mylistv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MyListService_GetMyListsByUserID_FullMethodName                       = "/mylist.v1.MyListService/GetMyListsByUserID"
	MyListService_CreateMyList_FullMethodName                             = "/mylist.v1.MyListService/CreateMyList"
	MyListService_ChangeMyListName_FullMethodName                         = "/mylist.v1.MyListService/ChangeMyListName"
	MyListService_ChangeMyListPosition_FullMethodName                     = "/mylist.v1.MyListService/ChangeMyListPosition"
	MyListService_DeleteMyList_FullMethodName                             = "/mylist.v1.MyListService/DeleteMyList"
	MyListService_GetMyListChartsByMyListID_FullMethodName                = "/mylist.v1.MyListService/GetMyListChartsByMyListID"
	MyListService_GetMyListChartByID_FullMethodName                       = "/mylist.v1.MyListService/GetMyListChartByID"
	MyListService_AddMyListChart_FullMethodName                           = "/mylist.v1.MyListService/AddMyListChart"
	MyListService_ChangeMyListChartClearType_FullMethodName               = "/mylist.v1.MyListService/ChangeMyListChartClearType"
	MyListService_ChangeMyListChartMemo_FullMethodName                    = "/mylist.v1.MyListService/ChangeMyListChartMemo"
	MyListService_DeleteMyListChart_FullMethodName                        = "/mylist.v1.MyListService/DeleteMyListChart"
	MyListService_GetMyListChartAttachmentsByMyListChartID_FullMethodName = "/mylist.v1.MyListService/GetMyListChartAttachmentsByMyListChartID"
	MyListService_AddMyListChartAttachment_FullMethodName                 = "/mylist.v1.MyListService/AddMyListChartAttachment"
	MyListService_DeleteMyListChartAttachment_FullMethodName              = "/mylist.v1.MyListService/DeleteMyListChartAttachment"
)

// MyListServiceClient is the client API for MyListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyListServiceClient interface {
	GetMyListsByUserID(ctx context.Context, in *GetMyListsByUserIDRequest, opts ...grpc.CallOption) (*GetMyListsByUserIDResponse, error)
	CreateMyList(ctx context.Context, in *CreateMyListRequest, opts ...grpc.CallOption) (*CreateMyListResponse, error)
	ChangeMyListName(ctx context.Context, in *ChangeMyListNameRequest, opts ...grpc.CallOption) (*ChangeMyListNameResponse, error)
	ChangeMyListPosition(ctx context.Context, in *ChangeMyListPositionRequest, opts ...grpc.CallOption) (*ChangeMyListPositionResponse, error)
	DeleteMyList(ctx context.Context, in *DeleteMyListRequest, opts ...grpc.CallOption) (*DeleteMyListResponse, error)
	GetMyListChartsByMyListID(ctx context.Context, in *GetMyListChartsByMyListIDRequest, opts ...grpc.CallOption) (*GetMyListChartsByMyListIDResponse, error)
	GetMyListChartByID(ctx context.Context, in *GetMyListChartByIDRequest, opts ...grpc.CallOption) (*GetMyListChartByIDResponse, error)
	AddMyListChart(ctx context.Context, in *AddMyListChartRequest, opts ...grpc.CallOption) (*AddMyListChartResponse, error)
	ChangeMyListChartClearType(ctx context.Context, in *ChangeMyListChartClearTypeRequest, opts ...grpc.CallOption) (*ChangeMyListChartClearTypeResponse, error)
	ChangeMyListChartMemo(ctx context.Context, in *ChangeMyListChartMemoRequest, opts ...grpc.CallOption) (*ChangeMyListChartMemoResponse, error)
	DeleteMyListChart(ctx context.Context, in *DeleteMyListChartRequest, opts ...grpc.CallOption) (*DeleteMyListChartResponse, error)
	GetMyListChartAttachmentsByMyListChartID(ctx context.Context, in *GetMyListChartAttachmentsByMyListChartIDRequest, opts ...grpc.CallOption) (*GetMyListChartAttachmentsByMyListChartIDResponse, error)
	AddMyListChartAttachment(ctx context.Context, in *AddMyListChartAttachmentRequest, opts ...grpc.CallOption) (*AddMyListChartAttachmentResponse, error)
	DeleteMyListChartAttachment(ctx context.Context, in *DeleteMyListChartAttachmentRequest, opts ...grpc.CallOption) (*DeleteMyListChartAttachmentResponse, error)
}

type myListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyListServiceClient(cc grpc.ClientConnInterface) MyListServiceClient {
	return &myListServiceClient{cc}
}

func (c *myListServiceClient) GetMyListsByUserID(ctx context.Context, in *GetMyListsByUserIDRequest, opts ...grpc.CallOption) (*GetMyListsByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyListsByUserIDResponse)
	err := c.cc.Invoke(ctx, MyListService_GetMyListsByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) CreateMyList(ctx context.Context, in *CreateMyListRequest, opts ...grpc.CallOption) (*CreateMyListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMyListResponse)
	err := c.cc.Invoke(ctx, MyListService_CreateMyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) ChangeMyListName(ctx context.Context, in *ChangeMyListNameRequest, opts ...grpc.CallOption) (*ChangeMyListNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeMyListNameResponse)
	err := c.cc.Invoke(ctx, MyListService_ChangeMyListName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) ChangeMyListPosition(ctx context.Context, in *ChangeMyListPositionRequest, opts ...grpc.CallOption) (*ChangeMyListPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeMyListPositionResponse)
	err := c.cc.Invoke(ctx, MyListService_ChangeMyListPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) DeleteMyList(ctx context.Context, in *DeleteMyListRequest, opts ...grpc.CallOption) (*DeleteMyListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMyListResponse)
	err := c.cc.Invoke(ctx, MyListService_DeleteMyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) GetMyListChartsByMyListID(ctx context.Context, in *GetMyListChartsByMyListIDRequest, opts ...grpc.CallOption) (*GetMyListChartsByMyListIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyListChartsByMyListIDResponse)
	err := c.cc.Invoke(ctx, MyListService_GetMyListChartsByMyListID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) GetMyListChartByID(ctx context.Context, in *GetMyListChartByIDRequest, opts ...grpc.CallOption) (*GetMyListChartByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyListChartByIDResponse)
	err := c.cc.Invoke(ctx, MyListService_GetMyListChartByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) AddMyListChart(ctx context.Context, in *AddMyListChartRequest, opts ...grpc.CallOption) (*AddMyListChartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMyListChartResponse)
	err := c.cc.Invoke(ctx, MyListService_AddMyListChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) ChangeMyListChartClearType(ctx context.Context, in *ChangeMyListChartClearTypeRequest, opts ...grpc.CallOption) (*ChangeMyListChartClearTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeMyListChartClearTypeResponse)
	err := c.cc.Invoke(ctx, MyListService_ChangeMyListChartClearType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) ChangeMyListChartMemo(ctx context.Context, in *ChangeMyListChartMemoRequest, opts ...grpc.CallOption) (*ChangeMyListChartMemoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeMyListChartMemoResponse)
	err := c.cc.Invoke(ctx, MyListService_ChangeMyListChartMemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) DeleteMyListChart(ctx context.Context, in *DeleteMyListChartRequest, opts ...grpc.CallOption) (*DeleteMyListChartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMyListChartResponse)
	err := c.cc.Invoke(ctx, MyListService_DeleteMyListChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) GetMyListChartAttachmentsByMyListChartID(ctx context.Context, in *GetMyListChartAttachmentsByMyListChartIDRequest, opts ...grpc.CallOption) (*GetMyListChartAttachmentsByMyListChartIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyListChartAttachmentsByMyListChartIDResponse)
	err := c.cc.Invoke(ctx, MyListService_GetMyListChartAttachmentsByMyListChartID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) AddMyListChartAttachment(ctx context.Context, in *AddMyListChartAttachmentRequest, opts ...grpc.CallOption) (*AddMyListChartAttachmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMyListChartAttachmentResponse)
	err := c.cc.Invoke(ctx, MyListService_AddMyListChartAttachment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myListServiceClient) DeleteMyListChartAttachment(ctx context.Context, in *DeleteMyListChartAttachmentRequest, opts ...grpc.CallOption) (*DeleteMyListChartAttachmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMyListChartAttachmentResponse)
	err := c.cc.Invoke(ctx, MyListService_DeleteMyListChartAttachment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyListServiceServer is the server API for MyListService service.
// All implementations must embed UnimplementedMyListServiceServer
// for forward compatibility.
type MyListServiceServer interface {
	GetMyListsByUserID(context.Context, *GetMyListsByUserIDRequest) (*GetMyListsByUserIDResponse, error)
	CreateMyList(context.Context, *CreateMyListRequest) (*CreateMyListResponse, error)
	ChangeMyListName(context.Context, *ChangeMyListNameRequest) (*ChangeMyListNameResponse, error)
	ChangeMyListPosition(context.Context, *ChangeMyListPositionRequest) (*ChangeMyListPositionResponse, error)
	DeleteMyList(context.Context, *DeleteMyListRequest) (*DeleteMyListResponse, error)
	GetMyListChartsByMyListID(context.Context, *GetMyListChartsByMyListIDRequest) (*GetMyListChartsByMyListIDResponse, error)
	GetMyListChartByID(context.Context, *GetMyListChartByIDRequest) (*GetMyListChartByIDResponse, error)
	AddMyListChart(context.Context, *AddMyListChartRequest) (*AddMyListChartResponse, error)
	ChangeMyListChartClearType(context.Context, *ChangeMyListChartClearTypeRequest) (*ChangeMyListChartClearTypeResponse, error)
	ChangeMyListChartMemo(context.Context, *ChangeMyListChartMemoRequest) (*ChangeMyListChartMemoResponse, error)
	DeleteMyListChart(context.Context, *DeleteMyListChartRequest) (*DeleteMyListChartResponse, error)
	GetMyListChartAttachmentsByMyListChartID(context.Context, *GetMyListChartAttachmentsByMyListChartIDRequest) (*GetMyListChartAttachmentsByMyListChartIDResponse, error)
	AddMyListChartAttachment(context.Context, *AddMyListChartAttachmentRequest) (*AddMyListChartAttachmentResponse, error)
	DeleteMyListChartAttachment(context.Context, *DeleteMyListChartAttachmentRequest) (*DeleteMyListChartAttachmentResponse, error)
	mustEmbedUnimplementedMyListServiceServer()
}

// UnimplementedMyListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMyListServiceServer struct{}

func (UnimplementedMyListServiceServer) GetMyListsByUserID(context.Context, *GetMyListsByUserIDRequest) (*GetMyListsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyListsByUserID not implemented")
}
func (UnimplementedMyListServiceServer) CreateMyList(context.Context, *CreateMyListRequest) (*CreateMyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyList not implemented")
}
func (UnimplementedMyListServiceServer) ChangeMyListName(context.Context, *ChangeMyListNameRequest) (*ChangeMyListNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMyListName not implemented")
}
func (UnimplementedMyListServiceServer) ChangeMyListPosition(context.Context, *ChangeMyListPositionRequest) (*ChangeMyListPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMyListPosition not implemented")
}
func (UnimplementedMyListServiceServer) DeleteMyList(context.Context, *DeleteMyListRequest) (*DeleteMyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyList not implemented")
}
func (UnimplementedMyListServiceServer) GetMyListChartsByMyListID(context.Context, *GetMyListChartsByMyListIDRequest) (*GetMyListChartsByMyListIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyListChartsByMyListID not implemented")
}
func (UnimplementedMyListServiceServer) GetMyListChartByID(context.Context, *GetMyListChartByIDRequest) (*GetMyListChartByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyListChartByID not implemented")
}
func (UnimplementedMyListServiceServer) AddMyListChart(context.Context, *AddMyListChartRequest) (*AddMyListChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMyListChart not implemented")
}
func (UnimplementedMyListServiceServer) ChangeMyListChartClearType(context.Context, *ChangeMyListChartClearTypeRequest) (*ChangeMyListChartClearTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMyListChartClearType not implemented")
}
func (UnimplementedMyListServiceServer) ChangeMyListChartMemo(context.Context, *ChangeMyListChartMemoRequest) (*ChangeMyListChartMemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMyListChartMemo not implemented")
}
func (UnimplementedMyListServiceServer) DeleteMyListChart(context.Context, *DeleteMyListChartRequest) (*DeleteMyListChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyListChart not implemented")
}
func (UnimplementedMyListServiceServer) GetMyListChartAttachmentsByMyListChartID(context.Context, *GetMyListChartAttachmentsByMyListChartIDRequest) (*GetMyListChartAttachmentsByMyListChartIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyListChartAttachmentsByMyListChartID not implemented")
}
func (UnimplementedMyListServiceServer) AddMyListChartAttachment(context.Context, *AddMyListChartAttachmentRequest) (*AddMyListChartAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMyListChartAttachment not implemented")
}
func (UnimplementedMyListServiceServer) DeleteMyListChartAttachment(context.Context, *DeleteMyListChartAttachmentRequest) (*DeleteMyListChartAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyListChartAttachment not implemented")
}
func (UnimplementedMyListServiceServer) mustEmbedUnimplementedMyListServiceServer() {}
func (UnimplementedMyListServiceServer) testEmbeddedByValue()                       {}

// UnsafeMyListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyListServiceServer will
// result in compilation errors.
type UnsafeMyListServiceServer interface {
	mustEmbedUnimplementedMyListServiceServer()
}

func RegisterMyListServiceServer(s grpc.ServiceRegistrar, srv MyListServiceServer) {
	// If the following call pancis, it indicates UnimplementedMyListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MyListService_ServiceDesc, srv)
}

func _MyListService_GetMyListsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyListsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).GetMyListsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_GetMyListsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).GetMyListsByUserID(ctx, req.(*GetMyListsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_CreateMyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).CreateMyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_CreateMyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).CreateMyList(ctx, req.(*CreateMyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_ChangeMyListName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMyListNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).ChangeMyListName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_ChangeMyListName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).ChangeMyListName(ctx, req.(*ChangeMyListNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_ChangeMyListPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMyListPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).ChangeMyListPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_ChangeMyListPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).ChangeMyListPosition(ctx, req.(*ChangeMyListPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_DeleteMyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).DeleteMyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_DeleteMyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).DeleteMyList(ctx, req.(*DeleteMyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_GetMyListChartsByMyListID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyListChartsByMyListIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).GetMyListChartsByMyListID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_GetMyListChartsByMyListID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).GetMyListChartsByMyListID(ctx, req.(*GetMyListChartsByMyListIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_GetMyListChartByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyListChartByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).GetMyListChartByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_GetMyListChartByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).GetMyListChartByID(ctx, req.(*GetMyListChartByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_AddMyListChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMyListChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).AddMyListChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_AddMyListChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).AddMyListChart(ctx, req.(*AddMyListChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_ChangeMyListChartClearType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMyListChartClearTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).ChangeMyListChartClearType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_ChangeMyListChartClearType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).ChangeMyListChartClearType(ctx, req.(*ChangeMyListChartClearTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_ChangeMyListChartMemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMyListChartMemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).ChangeMyListChartMemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_ChangeMyListChartMemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).ChangeMyListChartMemo(ctx, req.(*ChangeMyListChartMemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_DeleteMyListChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMyListChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).DeleteMyListChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_DeleteMyListChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).DeleteMyListChart(ctx, req.(*DeleteMyListChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_GetMyListChartAttachmentsByMyListChartID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyListChartAttachmentsByMyListChartIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).GetMyListChartAttachmentsByMyListChartID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_GetMyListChartAttachmentsByMyListChartID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).GetMyListChartAttachmentsByMyListChartID(ctx, req.(*GetMyListChartAttachmentsByMyListChartIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_AddMyListChartAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMyListChartAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).AddMyListChartAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_AddMyListChartAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).AddMyListChartAttachment(ctx, req.(*AddMyListChartAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyListService_DeleteMyListChartAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMyListChartAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyListServiceServer).DeleteMyListChartAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyListService_DeleteMyListChartAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyListServiceServer).DeleteMyListChartAttachment(ctx, req.(*DeleteMyListChartAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyListService_ServiceDesc is the grpc.ServiceDesc for MyListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mylist.v1.MyListService",
	HandlerType: (*MyListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMyListsByUserID",
			Handler:    _MyListService_GetMyListsByUserID_Handler,
		},
		{
			MethodName: "CreateMyList",
			Handler:    _MyListService_CreateMyList_Handler,
		},
		{
			MethodName: "ChangeMyListName",
			Handler:    _MyListService_ChangeMyListName_Handler,
		},
		{
			MethodName: "ChangeMyListPosition",
			Handler:    _MyListService_ChangeMyListPosition_Handler,
		},
		{
			MethodName: "DeleteMyList",
			Handler:    _MyListService_DeleteMyList_Handler,
		},
		{
			MethodName: "GetMyListChartsByMyListID",
			Handler:    _MyListService_GetMyListChartsByMyListID_Handler,
		},
		{
			MethodName: "GetMyListChartByID",
			Handler:    _MyListService_GetMyListChartByID_Handler,
		},
		{
			MethodName: "AddMyListChart",
			Handler:    _MyListService_AddMyListChart_Handler,
		},
		{
			MethodName: "ChangeMyListChartClearType",
			Handler:    _MyListService_ChangeMyListChartClearType_Handler,
		},
		{
			MethodName: "ChangeMyListChartMemo",
			Handler:    _MyListService_ChangeMyListChartMemo_Handler,
		},
		{
			MethodName: "DeleteMyListChart",
			Handler:    _MyListService_DeleteMyListChart_Handler,
		},
		{
			MethodName: "GetMyListChartAttachmentsByMyListChartID",
			Handler:    _MyListService_GetMyListChartAttachmentsByMyListChartID_Handler,
		},
		{
			MethodName: "AddMyListChartAttachment",
			Handler:    _MyListService_AddMyListChartAttachment_Handler,
		},
		{
			MethodName: "DeleteMyListChartAttachment",
			Handler:    _MyListService_DeleteMyListChartAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mylist/v1/mylist.proto",
}
