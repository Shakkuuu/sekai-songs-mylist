// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mylist/v1/mylist.proto

package mylistv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "github.com/Shakkuuu/sekai-songs-mylist/internal/gen/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.ClearType(0)
)

// Validate checks the field values on MyList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MyList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyList with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MyListMultiError, or nil if none found.
func (m *MyList) ValidateAll() error {
	return m.validate(true)
}

func (m *MyList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Position

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MyListValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MyListValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MyListValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MyListValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MyListValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MyListValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MyListMultiError(errors)
	}

	return nil
}

// MyListMultiError is an error wrapping multiple validation errors returned by
// MyList.ValidateAll() if the designated constraints aren't met.
type MyListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyListMultiError) AllErrors() []error { return m }

// MyListValidationError is the validation error returned by MyList.Validate if
// the designated constraints aren't met.
type MyListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyListValidationError) ErrorName() string { return "MyListValidationError" }

// Error satisfies the builtin error interface
func (e MyListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyListValidationError{}

// Validate checks the field values on MyListChart with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MyListChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyListChart with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MyListChartMultiError, or
// nil if none found.
func (m *MyListChart) ValidateAll() error {
	return m.validate(true)
}

func (m *MyListChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MyListId

	if all {
		switch v := interface{}(m.GetChart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MyListChartValidationError{
					field:  "Chart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MyListChartValidationError{
					field:  "Chart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MyListChartValidationError{
				field:  "Chart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClearType

	// no validation rules for Memo

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MyListChartValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MyListChartValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MyListChartValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MyListChartValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MyListChartValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MyListChartValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MyListChartMultiError(errors)
	}

	return nil
}

// MyListChartMultiError is an error wrapping multiple validation errors
// returned by MyListChart.ValidateAll() if the designated constraints aren't met.
type MyListChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyListChartMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyListChartMultiError) AllErrors() []error { return m }

// MyListChartValidationError is the validation error returned by
// MyListChart.Validate if the designated constraints aren't met.
type MyListChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyListChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyListChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyListChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyListChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyListChartValidationError) ErrorName() string { return "MyListChartValidationError" }

// Error satisfies the builtin error interface
func (e MyListChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyListChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyListChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyListChartValidationError{}

// Validate checks the field values on MyListChartAttachment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MyListChartAttachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyListChartAttachment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MyListChartAttachmentMultiError, or nil if none found.
func (m *MyListChartAttachment) ValidateAll() error {
	return m.validate(true)
}

func (m *MyListChartAttachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MyListChartId

	// no validation rules for AttachmentType

	// no validation rules for FileUrl

	// no validation rules for Caption

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MyListChartAttachmentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MyListChartAttachmentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MyListChartAttachmentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MyListChartAttachmentMultiError(errors)
	}

	return nil
}

// MyListChartAttachmentMultiError is an error wrapping multiple validation
// errors returned by MyListChartAttachment.ValidateAll() if the designated
// constraints aren't met.
type MyListChartAttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyListChartAttachmentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyListChartAttachmentMultiError) AllErrors() []error { return m }

// MyListChartAttachmentValidationError is the validation error returned by
// MyListChartAttachment.Validate if the designated constraints aren't met.
type MyListChartAttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyListChartAttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyListChartAttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyListChartAttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyListChartAttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyListChartAttachmentValidationError) ErrorName() string {
	return "MyListChartAttachmentValidationError"
}

// Error satisfies the builtin error interface
func (e MyListChartAttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyListChartAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyListChartAttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyListChartAttachmentValidationError{}

// Validate checks the field values on GetMyListsByUserIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyListsByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyListsByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyListsByUserIDRequestMultiError, or nil if none found.
func (m *GetMyListsByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyListsByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMyListsByUserIDRequestMultiError(errors)
	}

	return nil
}

// GetMyListsByUserIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetMyListsByUserIDRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMyListsByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyListsByUserIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyListsByUserIDRequestMultiError) AllErrors() []error { return m }

// GetMyListsByUserIDRequestValidationError is the validation error returned by
// GetMyListsByUserIDRequest.Validate if the designated constraints aren't met.
type GetMyListsByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyListsByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyListsByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyListsByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyListsByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyListsByUserIDRequestValidationError) ErrorName() string {
	return "GetMyListsByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyListsByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyListsByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyListsByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyListsByUserIDRequestValidationError{}

// Validate checks the field values on GetMyListsByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyListsByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyListsByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyListsByUserIDResponseMultiError, or nil if none found.
func (m *GetMyListsByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyListsByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMyLists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyListsByUserIDResponseValidationError{
						field:  fmt.Sprintf("MyLists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyListsByUserIDResponseValidationError{
						field:  fmt.Sprintf("MyLists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyListsByUserIDResponseValidationError{
					field:  fmt.Sprintf("MyLists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMyListsByUserIDResponseMultiError(errors)
	}

	return nil
}

// GetMyListsByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetMyListsByUserIDResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMyListsByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyListsByUserIDResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyListsByUserIDResponseMultiError) AllErrors() []error { return m }

// GetMyListsByUserIDResponseValidationError is the validation error returned
// by GetMyListsByUserIDResponse.Validate if the designated constraints aren't met.
type GetMyListsByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyListsByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyListsByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyListsByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyListsByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyListsByUserIDResponseValidationError) ErrorName() string {
	return "GetMyListsByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyListsByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyListsByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyListsByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyListsByUserIDResponseValidationError{}

// Validate checks the field values on CreateMyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMyListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMyListRequestMultiError, or nil if none found.
func (m *CreateMyListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMyListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateMyListRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPosition() < 1 {
		err := CreateMyListRequestValidationError{
			field:  "Position",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMyListRequestMultiError(errors)
	}

	return nil
}

// CreateMyListRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMyListRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMyListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMyListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMyListRequestMultiError) AllErrors() []error { return m }

// CreateMyListRequestValidationError is the validation error returned by
// CreateMyListRequest.Validate if the designated constraints aren't met.
type CreateMyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMyListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMyListRequestValidationError) ErrorName() string {
	return "CreateMyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMyListRequestValidationError{}

// Validate checks the field values on CreateMyListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMyListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMyListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMyListResponseMultiError, or nil if none found.
func (m *CreateMyListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMyListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateMyListResponseMultiError(errors)
	}

	return nil
}

// CreateMyListResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMyListResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMyListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMyListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMyListResponseMultiError) AllErrors() []error { return m }

// CreateMyListResponseValidationError is the validation error returned by
// CreateMyListResponse.Validate if the designated constraints aren't met.
type CreateMyListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMyListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMyListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMyListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMyListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMyListResponseValidationError) ErrorName() string {
	return "CreateMyListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMyListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMyListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMyListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMyListResponseValidationError{}

// Validate checks the field values on ChangeMyListNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMyListNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMyListNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMyListNameRequestMultiError, or nil if none found.
func (m *ChangeMyListNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMyListNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := ChangeMyListNameRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeMyListNameRequestMultiError(errors)
	}

	return nil
}

// ChangeMyListNameRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeMyListNameRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeMyListNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMyListNameRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMyListNameRequestMultiError) AllErrors() []error { return m }

// ChangeMyListNameRequestValidationError is the validation error returned by
// ChangeMyListNameRequest.Validate if the designated constraints aren't met.
type ChangeMyListNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMyListNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMyListNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMyListNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMyListNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMyListNameRequestValidationError) ErrorName() string {
	return "ChangeMyListNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMyListNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMyListNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMyListNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMyListNameRequestValidationError{}

// Validate checks the field values on ChangeMyListNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMyListNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMyListNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMyListNameResponseMultiError, or nil if none found.
func (m *ChangeMyListNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMyListNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeMyListNameResponseMultiError(errors)
	}

	return nil
}

// ChangeMyListNameResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeMyListNameResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeMyListNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMyListNameResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMyListNameResponseMultiError) AllErrors() []error { return m }

// ChangeMyListNameResponseValidationError is the validation error returned by
// ChangeMyListNameResponse.Validate if the designated constraints aren't met.
type ChangeMyListNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMyListNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMyListNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMyListNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMyListNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMyListNameResponseValidationError) ErrorName() string {
	return "ChangeMyListNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMyListNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMyListNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMyListNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMyListNameResponseValidationError{}

// Validate checks the field values on ChangeMyListPositionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMyListPositionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMyListPositionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMyListPositionRequestMultiError, or nil if none found.
func (m *ChangeMyListPositionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMyListPositionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosition() {
		_, _ = idx, item

		if item < 1 {
			err := ChangeMyListPositionRequestValidationError{
				field:  fmt.Sprintf("Position[%v]", idx),
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ChangeMyListPositionRequestMultiError(errors)
	}

	return nil
}

// ChangeMyListPositionRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeMyListPositionRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeMyListPositionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMyListPositionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMyListPositionRequestMultiError) AllErrors() []error { return m }

// ChangeMyListPositionRequestValidationError is the validation error returned
// by ChangeMyListPositionRequest.Validate if the designated constraints
// aren't met.
type ChangeMyListPositionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMyListPositionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMyListPositionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMyListPositionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMyListPositionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMyListPositionRequestValidationError) ErrorName() string {
	return "ChangeMyListPositionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMyListPositionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMyListPositionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMyListPositionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMyListPositionRequestValidationError{}

// Validate checks the field values on ChangeMyListPositionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMyListPositionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMyListPositionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMyListPositionResponseMultiError, or nil if none found.
func (m *ChangeMyListPositionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMyListPositionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeMyListPositionResponseMultiError(errors)
	}

	return nil
}

// ChangeMyListPositionResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeMyListPositionResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeMyListPositionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMyListPositionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMyListPositionResponseMultiError) AllErrors() []error { return m }

// ChangeMyListPositionResponseValidationError is the validation error returned
// by ChangeMyListPositionResponse.Validate if the designated constraints
// aren't met.
type ChangeMyListPositionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMyListPositionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMyListPositionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMyListPositionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMyListPositionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMyListPositionResponseValidationError) ErrorName() string {
	return "ChangeMyListPositionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMyListPositionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMyListPositionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMyListPositionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMyListPositionResponseValidationError{}

// Validate checks the field values on DeleteMyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMyListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMyListRequestMultiError, or nil if none found.
func (m *DeleteMyListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMyListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMyListRequestMultiError(errors)
	}

	return nil
}

// DeleteMyListRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMyListRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMyListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMyListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMyListRequestMultiError) AllErrors() []error { return m }

// DeleteMyListRequestValidationError is the validation error returned by
// DeleteMyListRequest.Validate if the designated constraints aren't met.
type DeleteMyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMyListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMyListRequestValidationError) ErrorName() string {
	return "DeleteMyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMyListRequestValidationError{}

// Validate checks the field values on DeleteMyListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMyListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMyListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMyListResponseMultiError, or nil if none found.
func (m *DeleteMyListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMyListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMyListResponseMultiError(errors)
	}

	return nil
}

// DeleteMyListResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMyListResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMyListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMyListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMyListResponseMultiError) AllErrors() []error { return m }

// DeleteMyListResponseValidationError is the validation error returned by
// DeleteMyListResponse.Validate if the designated constraints aren't met.
type DeleteMyListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMyListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMyListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMyListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMyListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMyListResponseValidationError) ErrorName() string {
	return "DeleteMyListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMyListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMyListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMyListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMyListResponseValidationError{}

// Validate checks the field values on GetMyListChartsByMyListIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetMyListChartsByMyListIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyListChartsByMyListIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMyListChartsByMyListIDRequestMultiError, or nil if none found.
func (m *GetMyListChartsByMyListIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyListChartsByMyListIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MyListId

	if len(errors) > 0 {
		return GetMyListChartsByMyListIDRequestMultiError(errors)
	}

	return nil
}

// GetMyListChartsByMyListIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetMyListChartsByMyListIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMyListChartsByMyListIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyListChartsByMyListIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyListChartsByMyListIDRequestMultiError) AllErrors() []error { return m }

// GetMyListChartsByMyListIDRequestValidationError is the validation error
// returned by GetMyListChartsByMyListIDRequest.Validate if the designated
// constraints aren't met.
type GetMyListChartsByMyListIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyListChartsByMyListIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyListChartsByMyListIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyListChartsByMyListIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyListChartsByMyListIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyListChartsByMyListIDRequestValidationError) ErrorName() string {
	return "GetMyListChartsByMyListIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyListChartsByMyListIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyListChartsByMyListIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyListChartsByMyListIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyListChartsByMyListIDRequestValidationError{}

// Validate checks the field values on GetMyListChartsByMyListIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetMyListChartsByMyListIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyListChartsByMyListIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetMyListChartsByMyListIDResponseMultiError, or nil if none found.
func (m *GetMyListChartsByMyListIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyListChartsByMyListIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMyList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyListChartsByMyListIDResponseValidationError{
					field:  "MyList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyListChartsByMyListIDResponseValidationError{
					field:  "MyList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMyList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyListChartsByMyListIDResponseValidationError{
				field:  "MyList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMyListCharts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyListChartsByMyListIDResponseValidationError{
						field:  fmt.Sprintf("MyListCharts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyListChartsByMyListIDResponseValidationError{
						field:  fmt.Sprintf("MyListCharts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyListChartsByMyListIDResponseValidationError{
					field:  fmt.Sprintf("MyListCharts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMyListChartsByMyListIDResponseMultiError(errors)
	}

	return nil
}

// GetMyListChartsByMyListIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetMyListChartsByMyListIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMyListChartsByMyListIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyListChartsByMyListIDResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyListChartsByMyListIDResponseMultiError) AllErrors() []error { return m }

// GetMyListChartsByMyListIDResponseValidationError is the validation error
// returned by GetMyListChartsByMyListIDResponse.Validate if the designated
// constraints aren't met.
type GetMyListChartsByMyListIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyListChartsByMyListIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyListChartsByMyListIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyListChartsByMyListIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyListChartsByMyListIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyListChartsByMyListIDResponseValidationError) ErrorName() string {
	return "GetMyListChartsByMyListIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyListChartsByMyListIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyListChartsByMyListIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyListChartsByMyListIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyListChartsByMyListIDResponseValidationError{}

// Validate checks the field values on GetMyListChartByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyListChartByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyListChartByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyListChartByIDRequestMultiError, or nil if none found.
func (m *GetMyListChartByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyListChartByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMyListChartByIDRequestMultiError(errors)
	}

	return nil
}

// GetMyListChartByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetMyListChartByIDRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMyListChartByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyListChartByIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyListChartByIDRequestMultiError) AllErrors() []error { return m }

// GetMyListChartByIDRequestValidationError is the validation error returned by
// GetMyListChartByIDRequest.Validate if the designated constraints aren't met.
type GetMyListChartByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyListChartByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyListChartByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyListChartByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyListChartByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyListChartByIDRequestValidationError) ErrorName() string {
	return "GetMyListChartByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyListChartByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyListChartByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyListChartByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyListChartByIDRequestValidationError{}

// Validate checks the field values on GetMyListChartByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyListChartByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyListChartByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyListChartByIDResponseMultiError, or nil if none found.
func (m *GetMyListChartByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyListChartByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMyListChart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyListChartByIDResponseValidationError{
					field:  "MyListChart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyListChartByIDResponseValidationError{
					field:  "MyListChart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMyListChart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyListChartByIDResponseValidationError{
				field:  "MyListChart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMyListChartByIDResponseMultiError(errors)
	}

	return nil
}

// GetMyListChartByIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetMyListChartByIDResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMyListChartByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyListChartByIDResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyListChartByIDResponseMultiError) AllErrors() []error { return m }

// GetMyListChartByIDResponseValidationError is the validation error returned
// by GetMyListChartByIDResponse.Validate if the designated constraints aren't met.
type GetMyListChartByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyListChartByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyListChartByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyListChartByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyListChartByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyListChartByIDResponseValidationError) ErrorName() string {
	return "GetMyListChartByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyListChartByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyListChartByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyListChartByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyListChartByIDResponseValidationError{}

// Validate checks the field values on AddMyListChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMyListChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMyListChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMyListChartRequestMultiError, or nil if none found.
func (m *AddMyListChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMyListChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MyListId

	// no validation rules for ChartId

	// no validation rules for ClearType

	if l := utf8.RuneCountInString(m.GetMemo()); l < 0 || l > 100000 {
		err := AddMyListChartRequestValidationError{
			field:  "Memo",
			reason: "value length must be between 0 and 100000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddMyListChartRequestMultiError(errors)
	}

	return nil
}

// AddMyListChartRequestMultiError is an error wrapping multiple validation
// errors returned by AddMyListChartRequest.ValidateAll() if the designated
// constraints aren't met.
type AddMyListChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMyListChartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMyListChartRequestMultiError) AllErrors() []error { return m }

// AddMyListChartRequestValidationError is the validation error returned by
// AddMyListChartRequest.Validate if the designated constraints aren't met.
type AddMyListChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyListChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyListChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyListChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyListChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyListChartRequestValidationError) ErrorName() string {
	return "AddMyListChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyListChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyListChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyListChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyListChartRequestValidationError{}

// Validate checks the field values on AddMyListChartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMyListChartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMyListChartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMyListChartResponseMultiError, or nil if none found.
func (m *AddMyListChartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMyListChartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddMyListChartResponseMultiError(errors)
	}

	return nil
}

// AddMyListChartResponseMultiError is an error wrapping multiple validation
// errors returned by AddMyListChartResponse.ValidateAll() if the designated
// constraints aren't met.
type AddMyListChartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMyListChartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMyListChartResponseMultiError) AllErrors() []error { return m }

// AddMyListChartResponseValidationError is the validation error returned by
// AddMyListChartResponse.Validate if the designated constraints aren't met.
type AddMyListChartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyListChartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyListChartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyListChartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyListChartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyListChartResponseValidationError) ErrorName() string {
	return "AddMyListChartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyListChartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyListChartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyListChartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyListChartResponseValidationError{}

// Validate checks the field values on ChangeMyListChartClearTypeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeMyListChartClearTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMyListChartClearTypeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeMyListChartClearTypeRequestMultiError, or nil if none found.
func (m *ChangeMyListChartClearTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMyListChartClearTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClearType

	if len(errors) > 0 {
		return ChangeMyListChartClearTypeRequestMultiError(errors)
	}

	return nil
}

// ChangeMyListChartClearTypeRequestMultiError is an error wrapping multiple
// validation errors returned by
// ChangeMyListChartClearTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeMyListChartClearTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMyListChartClearTypeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMyListChartClearTypeRequestMultiError) AllErrors() []error { return m }

// ChangeMyListChartClearTypeRequestValidationError is the validation error
// returned by ChangeMyListChartClearTypeRequest.Validate if the designated
// constraints aren't met.
type ChangeMyListChartClearTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMyListChartClearTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMyListChartClearTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMyListChartClearTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMyListChartClearTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMyListChartClearTypeRequestValidationError) ErrorName() string {
	return "ChangeMyListChartClearTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMyListChartClearTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMyListChartClearTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMyListChartClearTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMyListChartClearTypeRequestValidationError{}

// Validate checks the field values on ChangeMyListChartClearTypeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeMyListChartClearTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMyListChartClearTypeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeMyListChartClearTypeResponseMultiError, or nil if none found.
func (m *ChangeMyListChartClearTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMyListChartClearTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeMyListChartClearTypeResponseMultiError(errors)
	}

	return nil
}

// ChangeMyListChartClearTypeResponseMultiError is an error wrapping multiple
// validation errors returned by
// ChangeMyListChartClearTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeMyListChartClearTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMyListChartClearTypeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMyListChartClearTypeResponseMultiError) AllErrors() []error { return m }

// ChangeMyListChartClearTypeResponseValidationError is the validation error
// returned by ChangeMyListChartClearTypeResponse.Validate if the designated
// constraints aren't met.
type ChangeMyListChartClearTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMyListChartClearTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMyListChartClearTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMyListChartClearTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMyListChartClearTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMyListChartClearTypeResponseValidationError) ErrorName() string {
	return "ChangeMyListChartClearTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMyListChartClearTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMyListChartClearTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMyListChartClearTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMyListChartClearTypeResponseValidationError{}

// Validate checks the field values on ChangeMyListChartMemoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMyListChartMemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMyListChartMemoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMyListChartMemoRequestMultiError, or nil if none found.
func (m *ChangeMyListChartMemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMyListChartMemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetMemo()); l < 0 || l > 100000 {
		err := ChangeMyListChartMemoRequestValidationError{
			field:  "Memo",
			reason: "value length must be between 0 and 100000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeMyListChartMemoRequestMultiError(errors)
	}

	return nil
}

// ChangeMyListChartMemoRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeMyListChartMemoRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeMyListChartMemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMyListChartMemoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMyListChartMemoRequestMultiError) AllErrors() []error { return m }

// ChangeMyListChartMemoRequestValidationError is the validation error returned
// by ChangeMyListChartMemoRequest.Validate if the designated constraints
// aren't met.
type ChangeMyListChartMemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMyListChartMemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMyListChartMemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMyListChartMemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMyListChartMemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMyListChartMemoRequestValidationError) ErrorName() string {
	return "ChangeMyListChartMemoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMyListChartMemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMyListChartMemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMyListChartMemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMyListChartMemoRequestValidationError{}

// Validate checks the field values on ChangeMyListChartMemoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMyListChartMemoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMyListChartMemoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeMyListChartMemoResponseMultiError, or nil if none found.
func (m *ChangeMyListChartMemoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMyListChartMemoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeMyListChartMemoResponseMultiError(errors)
	}

	return nil
}

// ChangeMyListChartMemoResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeMyListChartMemoResponse.ValidateAll()
// if the designated constraints aren't met.
type ChangeMyListChartMemoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMyListChartMemoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMyListChartMemoResponseMultiError) AllErrors() []error { return m }

// ChangeMyListChartMemoResponseValidationError is the validation error
// returned by ChangeMyListChartMemoResponse.Validate if the designated
// constraints aren't met.
type ChangeMyListChartMemoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMyListChartMemoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMyListChartMemoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMyListChartMemoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMyListChartMemoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMyListChartMemoResponseValidationError) ErrorName() string {
	return "ChangeMyListChartMemoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMyListChartMemoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMyListChartMemoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMyListChartMemoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMyListChartMemoResponseValidationError{}

// Validate checks the field values on DeleteMyListChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMyListChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMyListChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMyListChartRequestMultiError, or nil if none found.
func (m *DeleteMyListChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMyListChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMyListChartRequestMultiError(errors)
	}

	return nil
}

// DeleteMyListChartRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMyListChartRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMyListChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMyListChartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMyListChartRequestMultiError) AllErrors() []error { return m }

// DeleteMyListChartRequestValidationError is the validation error returned by
// DeleteMyListChartRequest.Validate if the designated constraints aren't met.
type DeleteMyListChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMyListChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMyListChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMyListChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMyListChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMyListChartRequestValidationError) ErrorName() string {
	return "DeleteMyListChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMyListChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMyListChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMyListChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMyListChartRequestValidationError{}

// Validate checks the field values on DeleteMyListChartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMyListChartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMyListChartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMyListChartResponseMultiError, or nil if none found.
func (m *DeleteMyListChartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMyListChartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMyListChartResponseMultiError(errors)
	}

	return nil
}

// DeleteMyListChartResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMyListChartResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteMyListChartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMyListChartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMyListChartResponseMultiError) AllErrors() []error { return m }

// DeleteMyListChartResponseValidationError is the validation error returned by
// DeleteMyListChartResponse.Validate if the designated constraints aren't met.
type DeleteMyListChartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMyListChartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMyListChartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMyListChartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMyListChartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMyListChartResponseValidationError) ErrorName() string {
	return "DeleteMyListChartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMyListChartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMyListChartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMyListChartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMyListChartResponseValidationError{}

// Validate checks the field values on
// GetMyListChartAttachmentsByMyListChartIDRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMyListChartAttachmentsByMyListChartIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetMyListChartAttachmentsByMyListChartIDRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetMyListChartAttachmentsByMyListChartIDRequestMultiError, or nil if none found.
func (m *GetMyListChartAttachmentsByMyListChartIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyListChartAttachmentsByMyListChartIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MyListChartId

	if len(errors) > 0 {
		return GetMyListChartAttachmentsByMyListChartIDRequestMultiError(errors)
	}

	return nil
}

// GetMyListChartAttachmentsByMyListChartIDRequestMultiError is an error
// wrapping multiple validation errors returned by
// GetMyListChartAttachmentsByMyListChartIDRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMyListChartAttachmentsByMyListChartIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyListChartAttachmentsByMyListChartIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyListChartAttachmentsByMyListChartIDRequestMultiError) AllErrors() []error { return m }

// GetMyListChartAttachmentsByMyListChartIDRequestValidationError is the
// validation error returned by
// GetMyListChartAttachmentsByMyListChartIDRequest.Validate if the designated
// constraints aren't met.
type GetMyListChartAttachmentsByMyListChartIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyListChartAttachmentsByMyListChartIDRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetMyListChartAttachmentsByMyListChartIDRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetMyListChartAttachmentsByMyListChartIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyListChartAttachmentsByMyListChartIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyListChartAttachmentsByMyListChartIDRequestValidationError) ErrorName() string {
	return "GetMyListChartAttachmentsByMyListChartIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyListChartAttachmentsByMyListChartIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyListChartAttachmentsByMyListChartIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyListChartAttachmentsByMyListChartIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyListChartAttachmentsByMyListChartIDRequestValidationError{}

// Validate checks the field values on
// GetMyListChartAttachmentsByMyListChartIDResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMyListChartAttachmentsByMyListChartIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetMyListChartAttachmentsByMyListChartIDResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetMyListChartAttachmentsByMyListChartIDResponseMultiError, or nil if none found.
func (m *GetMyListChartAttachmentsByMyListChartIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyListChartAttachmentsByMyListChartIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMyListChart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyListChartAttachmentsByMyListChartIDResponseValidationError{
					field:  "MyListChart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyListChartAttachmentsByMyListChartIDResponseValidationError{
					field:  "MyListChart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMyListChart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyListChartAttachmentsByMyListChartIDResponseValidationError{
				field:  "MyListChart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMyListChartAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyListChartAttachmentsByMyListChartIDResponseValidationError{
						field:  fmt.Sprintf("MyListChartAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyListChartAttachmentsByMyListChartIDResponseValidationError{
						field:  fmt.Sprintf("MyListChartAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyListChartAttachmentsByMyListChartIDResponseValidationError{
					field:  fmt.Sprintf("MyListChartAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMyListChartAttachmentsByMyListChartIDResponseMultiError(errors)
	}

	return nil
}

// GetMyListChartAttachmentsByMyListChartIDResponseMultiError is an error
// wrapping multiple validation errors returned by
// GetMyListChartAttachmentsByMyListChartIDResponse.ValidateAll() if the
// designated constraints aren't met.
type GetMyListChartAttachmentsByMyListChartIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyListChartAttachmentsByMyListChartIDResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyListChartAttachmentsByMyListChartIDResponseMultiError) AllErrors() []error { return m }

// GetMyListChartAttachmentsByMyListChartIDResponseValidationError is the
// validation error returned by
// GetMyListChartAttachmentsByMyListChartIDResponse.Validate if the designated
// constraints aren't met.
type GetMyListChartAttachmentsByMyListChartIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyListChartAttachmentsByMyListChartIDResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetMyListChartAttachmentsByMyListChartIDResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetMyListChartAttachmentsByMyListChartIDResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetMyListChartAttachmentsByMyListChartIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyListChartAttachmentsByMyListChartIDResponseValidationError) ErrorName() string {
	return "GetMyListChartAttachmentsByMyListChartIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyListChartAttachmentsByMyListChartIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyListChartAttachmentsByMyListChartIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyListChartAttachmentsByMyListChartIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyListChartAttachmentsByMyListChartIDResponseValidationError{}

// Validate checks the field values on AddMyListChartAttachmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMyListChartAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMyListChartAttachmentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddMyListChartAttachmentRequestMultiError, or nil if none found.
func (m *AddMyListChartAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMyListChartAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MyListChartId

	// no validation rules for AttachmentType

	if l := utf8.RuneCountInString(m.GetFileUrl()); l < 1 || l > 10000 {
		err := AddMyListChartAttachmentRequestValidationError{
			field:  "FileUrl",
			reason: "value length must be between 1 and 10000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCaption()); l < 1 || l > 100000 {
		err := AddMyListChartAttachmentRequestValidationError{
			field:  "Caption",
			reason: "value length must be between 1 and 100000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddMyListChartAttachmentRequestMultiError(errors)
	}

	return nil
}

// AddMyListChartAttachmentRequestMultiError is an error wrapping multiple
// validation errors returned by AddMyListChartAttachmentRequest.ValidateAll()
// if the designated constraints aren't met.
type AddMyListChartAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMyListChartAttachmentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMyListChartAttachmentRequestMultiError) AllErrors() []error { return m }

// AddMyListChartAttachmentRequestValidationError is the validation error
// returned by AddMyListChartAttachmentRequest.Validate if the designated
// constraints aren't met.
type AddMyListChartAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyListChartAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyListChartAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyListChartAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyListChartAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyListChartAttachmentRequestValidationError) ErrorName() string {
	return "AddMyListChartAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyListChartAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyListChartAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyListChartAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyListChartAttachmentRequestValidationError{}

// Validate checks the field values on AddMyListChartAttachmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddMyListChartAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMyListChartAttachmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddMyListChartAttachmentResponseMultiError, or nil if none found.
func (m *AddMyListChartAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMyListChartAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddMyListChartAttachmentResponseMultiError(errors)
	}

	return nil
}

// AddMyListChartAttachmentResponseMultiError is an error wrapping multiple
// validation errors returned by
// AddMyListChartAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type AddMyListChartAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMyListChartAttachmentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMyListChartAttachmentResponseMultiError) AllErrors() []error { return m }

// AddMyListChartAttachmentResponseValidationError is the validation error
// returned by AddMyListChartAttachmentResponse.Validate if the designated
// constraints aren't met.
type AddMyListChartAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyListChartAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyListChartAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyListChartAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyListChartAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyListChartAttachmentResponseValidationError) ErrorName() string {
	return "AddMyListChartAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyListChartAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyListChartAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyListChartAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyListChartAttachmentResponseValidationError{}

// Validate checks the field values on DeleteMyListChartAttachmentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteMyListChartAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMyListChartAttachmentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteMyListChartAttachmentRequestMultiError, or nil if none found.
func (m *DeleteMyListChartAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMyListChartAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMyListChartAttachmentRequestMultiError(errors)
	}

	return nil
}

// DeleteMyListChartAttachmentRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteMyListChartAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMyListChartAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMyListChartAttachmentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMyListChartAttachmentRequestMultiError) AllErrors() []error { return m }

// DeleteMyListChartAttachmentRequestValidationError is the validation error
// returned by DeleteMyListChartAttachmentRequest.Validate if the designated
// constraints aren't met.
type DeleteMyListChartAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMyListChartAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMyListChartAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMyListChartAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMyListChartAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMyListChartAttachmentRequestValidationError) ErrorName() string {
	return "DeleteMyListChartAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMyListChartAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMyListChartAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMyListChartAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMyListChartAttachmentRequestValidationError{}

// Validate checks the field values on DeleteMyListChartAttachmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteMyListChartAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMyListChartAttachmentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteMyListChartAttachmentResponseMultiError, or nil if none found.
func (m *DeleteMyListChartAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMyListChartAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMyListChartAttachmentResponseMultiError(errors)
	}

	return nil
}

// DeleteMyListChartAttachmentResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteMyListChartAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMyListChartAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMyListChartAttachmentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMyListChartAttachmentResponseMultiError) AllErrors() []error { return m }

// DeleteMyListChartAttachmentResponseValidationError is the validation error
// returned by DeleteMyListChartAttachmentResponse.Validate if the designated
// constraints aren't met.
type DeleteMyListChartAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMyListChartAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMyListChartAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMyListChartAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMyListChartAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMyListChartAttachmentResponseValidationError) ErrorName() string {
	return "DeleteMyListChartAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMyListChartAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMyListChartAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMyListChartAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMyListChartAttachmentResponseValidationError{}
