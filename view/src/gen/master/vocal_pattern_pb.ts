// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file master/vocal_pattern.proto (package master, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Singer } from "./singer_pb.js";
import { Unit } from "./unit_pb.js";

/**
 * VocalPatterns
 *
 * @generated from message master.VocalPattern
 */
export class VocalPattern extends Message<VocalPattern> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated master.Singer singers = 3;
   */
  singers: Singer[] = [];

  /**
   * @generated from field: repeated master.Unit units = 4;
   */
  units: Unit[] = [];

  constructor(data?: PartialMessage<VocalPattern>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.VocalPattern";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "singers", kind: "message", T: Singer, repeated: true },
    { no: 4, name: "units", kind: "message", T: Unit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VocalPattern {
    return new VocalPattern().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VocalPattern {
    return new VocalPattern().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VocalPattern {
    return new VocalPattern().fromJsonString(jsonString, options);
  }

  static equals(a: VocalPattern | PlainMessage<VocalPattern> | undefined, b: VocalPattern | PlainMessage<VocalPattern> | undefined): boolean {
    return proto3.util.equals(VocalPattern, a, b);
  }
}

