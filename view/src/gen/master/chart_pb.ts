// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file master/chart.proto (package master, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Song } from "./song_pb.js";
import { DifficultyType } from "../enums/master_pb.js";

/**
 * Charts
 *
 * @generated from message master.Chart
 */
export class Chart extends Message<Chart> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: master.Song song = 2;
   */
  song?: Song;

  /**
   * @generated from field: enums.DifficultyType difficulty_type = 3;
   */
  difficultyType = DifficultyType.UNSPECIFIED;

  /**
   * @generated from field: int32 level = 4;
   */
  level = 0;

  /**
   * @generated from field: string chart_view_link = 5;
   */
  chartViewLink = "";

  constructor(data?: PartialMessage<Chart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.Chart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "song", kind: "message", T: Song },
    { no: 3, name: "difficulty_type", kind: "enum", T: proto3.getEnumType(DifficultyType) },
    { no: 4, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "chart_view_link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chart {
    return new Chart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chart {
    return new Chart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chart {
    return new Chart().fromJsonString(jsonString, options);
  }

  static equals(a: Chart | PlainMessage<Chart> | undefined, b: Chart | PlainMessage<Chart> | undefined): boolean {
    return proto3.util.equals(Chart, a, b);
  }
}

