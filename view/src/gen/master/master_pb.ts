// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file master/master.proto (package master, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Artist } from "./artist_pb.js";
import { Song } from "./song_pb.js";

/**
 * @generated from message master.GetArtistsRequest
 */
export class GetArtistsRequest extends Message<GetArtistsRequest> {
  constructor(data?: PartialMessage<GetArtistsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.GetArtistsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtistsRequest {
    return new GetArtistsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtistsRequest {
    return new GetArtistsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtistsRequest {
    return new GetArtistsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtistsRequest | PlainMessage<GetArtistsRequest> | undefined, b: GetArtistsRequest | PlainMessage<GetArtistsRequest> | undefined): boolean {
    return proto3.util.equals(GetArtistsRequest, a, b);
  }
}

/**
 * @generated from message master.GetArtistsResponse
 */
export class GetArtistsResponse extends Message<GetArtistsResponse> {
  /**
   * @generated from field: repeated master.Artist artists = 1;
   */
  artists: Artist[] = [];

  constructor(data?: PartialMessage<GetArtistsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.GetArtistsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artists", kind: "message", T: Artist, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtistsResponse {
    return new GetArtistsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtistsResponse {
    return new GetArtistsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtistsResponse {
    return new GetArtistsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtistsResponse | PlainMessage<GetArtistsResponse> | undefined, b: GetArtistsResponse | PlainMessage<GetArtistsResponse> | undefined): boolean {
    return proto3.util.equals(GetArtistsResponse, a, b);
  }
}

/**
 * @generated from message master.GetArtistRequest
 */
export class GetArtistRequest extends Message<GetArtistRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetArtistRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.GetArtistRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtistRequest {
    return new GetArtistRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtistRequest {
    return new GetArtistRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtistRequest {
    return new GetArtistRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtistRequest | PlainMessage<GetArtistRequest> | undefined, b: GetArtistRequest | PlainMessage<GetArtistRequest> | undefined): boolean {
    return proto3.util.equals(GetArtistRequest, a, b);
  }
}

/**
 * @generated from message master.GetArtistResponse
 */
export class GetArtistResponse extends Message<GetArtistResponse> {
  /**
   * @generated from field: master.Artist artists = 1;
   */
  artists?: Artist;

  constructor(data?: PartialMessage<GetArtistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.GetArtistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artists", kind: "message", T: Artist },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtistResponse {
    return new GetArtistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtistResponse {
    return new GetArtistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtistResponse {
    return new GetArtistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtistResponse | PlainMessage<GetArtistResponse> | undefined, b: GetArtistResponse | PlainMessage<GetArtistResponse> | undefined): boolean {
    return proto3.util.equals(GetArtistResponse, a, b);
  }
}

/**
 * @generated from message master.CreateArtistRequest
 */
export class CreateArtistRequest extends Message<CreateArtistRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string kana = 2;
   */
  kana = "";

  constructor(data?: PartialMessage<CreateArtistRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.CreateArtistRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kana", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateArtistRequest {
    return new CreateArtistRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateArtistRequest {
    return new CreateArtistRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateArtistRequest {
    return new CreateArtistRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateArtistRequest | PlainMessage<CreateArtistRequest> | undefined, b: CreateArtistRequest | PlainMessage<CreateArtistRequest> | undefined): boolean {
    return proto3.util.equals(CreateArtistRequest, a, b);
  }
}

/**
 * @generated from message master.CreateArtistResponse
 */
export class CreateArtistResponse extends Message<CreateArtistResponse> {
  constructor(data?: PartialMessage<CreateArtistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.CreateArtistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateArtistResponse {
    return new CreateArtistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateArtistResponse {
    return new CreateArtistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateArtistResponse {
    return new CreateArtistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateArtistResponse | PlainMessage<CreateArtistResponse> | undefined, b: CreateArtistResponse | PlainMessage<CreateArtistResponse> | undefined): boolean {
    return proto3.util.equals(CreateArtistResponse, a, b);
  }
}

/**
 * @generated from message master.GetSongsRequest
 */
export class GetSongsRequest extends Message<GetSongsRequest> {
  constructor(data?: PartialMessage<GetSongsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.GetSongsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSongsRequest {
    return new GetSongsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSongsRequest {
    return new GetSongsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSongsRequest {
    return new GetSongsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSongsRequest | PlainMessage<GetSongsRequest> | undefined, b: GetSongsRequest | PlainMessage<GetSongsRequest> | undefined): boolean {
    return proto3.util.equals(GetSongsRequest, a, b);
  }
}

/**
 * @generated from message master.GetSongsResponse
 */
export class GetSongsResponse extends Message<GetSongsResponse> {
  /**
   * @generated from field: repeated master.Song songs = 1;
   */
  songs: Song[] = [];

  constructor(data?: PartialMessage<GetSongsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.GetSongsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "songs", kind: "message", T: Song, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSongsResponse {
    return new GetSongsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSongsResponse {
    return new GetSongsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSongsResponse {
    return new GetSongsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSongsResponse | PlainMessage<GetSongsResponse> | undefined, b: GetSongsResponse | PlainMessage<GetSongsResponse> | undefined): boolean {
    return proto3.util.equals(GetSongsResponse, a, b);
  }
}

/**
 * @generated from message master.GetSongRequest
 */
export class GetSongRequest extends Message<GetSongRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetSongRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.GetSongRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSongRequest {
    return new GetSongRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSongRequest {
    return new GetSongRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSongRequest {
    return new GetSongRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSongRequest | PlainMessage<GetSongRequest> | undefined, b: GetSongRequest | PlainMessage<GetSongRequest> | undefined): boolean {
    return proto3.util.equals(GetSongRequest, a, b);
  }
}

/**
 * @generated from message master.GetSongResponse
 */
export class GetSongResponse extends Message<GetSongResponse> {
  /**
   * @generated from field: repeated master.Song song = 1;
   */
  song: Song[] = [];

  constructor(data?: PartialMessage<GetSongResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.GetSongResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "song", kind: "message", T: Song, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSongResponse {
    return new GetSongResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSongResponse {
    return new GetSongResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSongResponse {
    return new GetSongResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSongResponse | PlainMessage<GetSongResponse> | undefined, b: GetSongResponse | PlainMessage<GetSongResponse> | undefined): boolean {
    return proto3.util.equals(GetSongResponse, a, b);
  }
}

/**
 * @generated from message master.CreateSongRequest
 */
export class CreateSongRequest extends Message<CreateSongRequest> {
  constructor(data?: PartialMessage<CreateSongRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "master.CreateSongRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSongRequest {
    return new CreateSongRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSongRequest {
    return new CreateSongRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSongRequest {
    return new CreateSongRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSongRequest | PlainMessage<CreateSongRequest> | undefined, b: CreateSongRequest | PlainMessage<CreateSongRequest> | undefined): boolean {
    return proto3.util.equals(CreateSongRequest, a, b);
  }
}

