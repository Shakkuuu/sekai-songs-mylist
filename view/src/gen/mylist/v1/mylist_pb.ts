// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file mylist/v1/mylist.proto (package mylist.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Chart } from "../../master/chart_pb.js";
import { AttachmentType, ClearType } from "../../enums/mylist_pb.js";

/**
 * MyList
 *
 * @generated from message mylist.v1.MyList
 */
export class MyList extends Message<MyList> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: int32 position = 4;
   */
  position = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<MyList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.MyList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MyList {
    return new MyList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MyList {
    return new MyList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MyList {
    return new MyList().fromJsonString(jsonString, options);
  }

  static equals(a: MyList | PlainMessage<MyList> | undefined, b: MyList | PlainMessage<MyList> | undefined): boolean {
    return proto3.util.equals(MyList, a, b);
  }
}

/**
 * MyListChart
 *
 * @generated from message mylist.v1.MyListChart
 */
export class MyListChart extends Message<MyListChart> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 my_list_id = 2;
   */
  myListId = 0;

  /**
   * @generated from field: master.Chart chart = 3;
   */
  chart?: Chart;

  /**
   * @generated from field: enums.ClearType clear_type = 4;
   */
  clearType = ClearType.UNSPECIFIED;

  /**
   * @generated from field: string memo = 5;
   */
  memo = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<MyListChart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.MyListChart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "my_list_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "chart", kind: "message", T: Chart },
    { no: 4, name: "clear_type", kind: "enum", T: proto3.getEnumType(ClearType) },
    { no: 5, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MyListChart {
    return new MyListChart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MyListChart {
    return new MyListChart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MyListChart {
    return new MyListChart().fromJsonString(jsonString, options);
  }

  static equals(a: MyListChart | PlainMessage<MyListChart> | undefined, b: MyListChart | PlainMessage<MyListChart> | undefined): boolean {
    return proto3.util.equals(MyListChart, a, b);
  }
}

/**
 * MyListChartAttachment
 *
 * @generated from message mylist.v1.MyListChartAttachment
 */
export class MyListChartAttachment extends Message<MyListChartAttachment> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 my_list_chart_id = 2;
   */
  myListChartId = 0;

  /**
   * @generated from field: enums.AttachmentType attachment_type = 3;
   */
  attachmentType = AttachmentType.UNSPECIFIED;

  /**
   * @generated from field: string file_url = 4;
   */
  fileUrl = "";

  /**
   * @generated from field: string caption = 5;
   */
  caption = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<MyListChartAttachment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.MyListChartAttachment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "my_list_chart_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "attachment_type", kind: "enum", T: proto3.getEnumType(AttachmentType) },
    { no: 4, name: "file_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "caption", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MyListChartAttachment {
    return new MyListChartAttachment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MyListChartAttachment {
    return new MyListChartAttachment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MyListChartAttachment {
    return new MyListChartAttachment().fromJsonString(jsonString, options);
  }

  static equals(a: MyListChartAttachment | PlainMessage<MyListChartAttachment> | undefined, b: MyListChartAttachment | PlainMessage<MyListChartAttachment> | undefined): boolean {
    return proto3.util.equals(MyListChartAttachment, a, b);
  }
}

/**
 * @generated from message mylist.v1.GetMyListsByUserIDRequest
 */
export class GetMyListsByUserIDRequest extends Message<GetMyListsByUserIDRequest> {
  constructor(data?: PartialMessage<GetMyListsByUserIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.GetMyListsByUserIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMyListsByUserIDRequest {
    return new GetMyListsByUserIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMyListsByUserIDRequest {
    return new GetMyListsByUserIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMyListsByUserIDRequest {
    return new GetMyListsByUserIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMyListsByUserIDRequest | PlainMessage<GetMyListsByUserIDRequest> | undefined, b: GetMyListsByUserIDRequest | PlainMessage<GetMyListsByUserIDRequest> | undefined): boolean {
    return proto3.util.equals(GetMyListsByUserIDRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.GetMyListsByUserIDResponse
 */
export class GetMyListsByUserIDResponse extends Message<GetMyListsByUserIDResponse> {
  /**
   * @generated from field: repeated mylist.v1.MyList my_lists = 1;
   */
  myLists: MyList[] = [];

  constructor(data?: PartialMessage<GetMyListsByUserIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.GetMyListsByUserIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "my_lists", kind: "message", T: MyList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMyListsByUserIDResponse {
    return new GetMyListsByUserIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMyListsByUserIDResponse {
    return new GetMyListsByUserIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMyListsByUserIDResponse {
    return new GetMyListsByUserIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMyListsByUserIDResponse | PlainMessage<GetMyListsByUserIDResponse> | undefined, b: GetMyListsByUserIDResponse | PlainMessage<GetMyListsByUserIDResponse> | undefined): boolean {
    return proto3.util.equals(GetMyListsByUserIDResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.CreateMyListRequest
 */
export class CreateMyListRequest extends Message<CreateMyListRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 position = 2;
   */
  position = 0;

  constructor(data?: PartialMessage<CreateMyListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.CreateMyListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMyListRequest {
    return new CreateMyListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMyListRequest {
    return new CreateMyListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMyListRequest {
    return new CreateMyListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMyListRequest | PlainMessage<CreateMyListRequest> | undefined, b: CreateMyListRequest | PlainMessage<CreateMyListRequest> | undefined): boolean {
    return proto3.util.equals(CreateMyListRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.CreateMyListResponse
 */
export class CreateMyListResponse extends Message<CreateMyListResponse> {
  constructor(data?: PartialMessage<CreateMyListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.CreateMyListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMyListResponse {
    return new CreateMyListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMyListResponse {
    return new CreateMyListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMyListResponse {
    return new CreateMyListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMyListResponse | PlainMessage<CreateMyListResponse> | undefined, b: CreateMyListResponse | PlainMessage<CreateMyListResponse> | undefined): boolean {
    return proto3.util.equals(CreateMyListResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.ChangeMyListNameRequest
 */
export class ChangeMyListNameRequest extends Message<ChangeMyListNameRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ChangeMyListNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.ChangeMyListNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMyListNameRequest {
    return new ChangeMyListNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMyListNameRequest {
    return new ChangeMyListNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMyListNameRequest {
    return new ChangeMyListNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMyListNameRequest | PlainMessage<ChangeMyListNameRequest> | undefined, b: ChangeMyListNameRequest | PlainMessage<ChangeMyListNameRequest> | undefined): boolean {
    return proto3.util.equals(ChangeMyListNameRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.ChangeMyListNameResponse
 */
export class ChangeMyListNameResponse extends Message<ChangeMyListNameResponse> {
  constructor(data?: PartialMessage<ChangeMyListNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.ChangeMyListNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMyListNameResponse {
    return new ChangeMyListNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMyListNameResponse {
    return new ChangeMyListNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMyListNameResponse {
    return new ChangeMyListNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMyListNameResponse | PlainMessage<ChangeMyListNameResponse> | undefined, b: ChangeMyListNameResponse | PlainMessage<ChangeMyListNameResponse> | undefined): boolean {
    return proto3.util.equals(ChangeMyListNameResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.ChangeMyListPositionRequest
 */
export class ChangeMyListPositionRequest extends Message<ChangeMyListPositionRequest> {
  /**
   * @generated from field: repeated int32 id = 1;
   */
  id: number[] = [];

  /**
   * @generated from field: repeated int32 position = 2;
   */
  position: number[] = [];

  constructor(data?: PartialMessage<ChangeMyListPositionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.ChangeMyListPositionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 2, name: "position", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMyListPositionRequest {
    return new ChangeMyListPositionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMyListPositionRequest {
    return new ChangeMyListPositionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMyListPositionRequest {
    return new ChangeMyListPositionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMyListPositionRequest | PlainMessage<ChangeMyListPositionRequest> | undefined, b: ChangeMyListPositionRequest | PlainMessage<ChangeMyListPositionRequest> | undefined): boolean {
    return proto3.util.equals(ChangeMyListPositionRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.ChangeMyListPositionResponse
 */
export class ChangeMyListPositionResponse extends Message<ChangeMyListPositionResponse> {
  constructor(data?: PartialMessage<ChangeMyListPositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.ChangeMyListPositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMyListPositionResponse {
    return new ChangeMyListPositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMyListPositionResponse {
    return new ChangeMyListPositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMyListPositionResponse {
    return new ChangeMyListPositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMyListPositionResponse | PlainMessage<ChangeMyListPositionResponse> | undefined, b: ChangeMyListPositionResponse | PlainMessage<ChangeMyListPositionResponse> | undefined): boolean {
    return proto3.util.equals(ChangeMyListPositionResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.DeleteMyListRequest
 */
export class DeleteMyListRequest extends Message<DeleteMyListRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteMyListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.DeleteMyListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMyListRequest {
    return new DeleteMyListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMyListRequest {
    return new DeleteMyListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMyListRequest {
    return new DeleteMyListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMyListRequest | PlainMessage<DeleteMyListRequest> | undefined, b: DeleteMyListRequest | PlainMessage<DeleteMyListRequest> | undefined): boolean {
    return proto3.util.equals(DeleteMyListRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.DeleteMyListResponse
 */
export class DeleteMyListResponse extends Message<DeleteMyListResponse> {
  constructor(data?: PartialMessage<DeleteMyListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.DeleteMyListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMyListResponse {
    return new DeleteMyListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMyListResponse {
    return new DeleteMyListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMyListResponse {
    return new DeleteMyListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMyListResponse | PlainMessage<DeleteMyListResponse> | undefined, b: DeleteMyListResponse | PlainMessage<DeleteMyListResponse> | undefined): boolean {
    return proto3.util.equals(DeleteMyListResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.GetMyListChartsByMyListIDRequest
 */
export class GetMyListChartsByMyListIDRequest extends Message<GetMyListChartsByMyListIDRequest> {
  /**
   * @generated from field: int32 my_list_id = 1;
   */
  myListId = 0;

  constructor(data?: PartialMessage<GetMyListChartsByMyListIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.GetMyListChartsByMyListIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "my_list_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMyListChartsByMyListIDRequest {
    return new GetMyListChartsByMyListIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMyListChartsByMyListIDRequest {
    return new GetMyListChartsByMyListIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMyListChartsByMyListIDRequest {
    return new GetMyListChartsByMyListIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMyListChartsByMyListIDRequest | PlainMessage<GetMyListChartsByMyListIDRequest> | undefined, b: GetMyListChartsByMyListIDRequest | PlainMessage<GetMyListChartsByMyListIDRequest> | undefined): boolean {
    return proto3.util.equals(GetMyListChartsByMyListIDRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.GetMyListChartsByMyListIDResponse
 */
export class GetMyListChartsByMyListIDResponse extends Message<GetMyListChartsByMyListIDResponse> {
  /**
   * @generated from field: mylist.v1.MyList my_list = 1;
   */
  myList?: MyList;

  /**
   * @generated from field: repeated mylist.v1.MyListChart my_list_charts = 2;
   */
  myListCharts: MyListChart[] = [];

  constructor(data?: PartialMessage<GetMyListChartsByMyListIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.GetMyListChartsByMyListIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "my_list", kind: "message", T: MyList },
    { no: 2, name: "my_list_charts", kind: "message", T: MyListChart, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMyListChartsByMyListIDResponse {
    return new GetMyListChartsByMyListIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMyListChartsByMyListIDResponse {
    return new GetMyListChartsByMyListIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMyListChartsByMyListIDResponse {
    return new GetMyListChartsByMyListIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMyListChartsByMyListIDResponse | PlainMessage<GetMyListChartsByMyListIDResponse> | undefined, b: GetMyListChartsByMyListIDResponse | PlainMessage<GetMyListChartsByMyListIDResponse> | undefined): boolean {
    return proto3.util.equals(GetMyListChartsByMyListIDResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.GetMyListChartByIDRequest
 */
export class GetMyListChartByIDRequest extends Message<GetMyListChartByIDRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetMyListChartByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.GetMyListChartByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMyListChartByIDRequest {
    return new GetMyListChartByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMyListChartByIDRequest {
    return new GetMyListChartByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMyListChartByIDRequest {
    return new GetMyListChartByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMyListChartByIDRequest | PlainMessage<GetMyListChartByIDRequest> | undefined, b: GetMyListChartByIDRequest | PlainMessage<GetMyListChartByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetMyListChartByIDRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.GetMyListChartByIDResponse
 */
export class GetMyListChartByIDResponse extends Message<GetMyListChartByIDResponse> {
  /**
   * @generated from field: mylist.v1.MyListChart my_list_chart = 1;
   */
  myListChart?: MyListChart;

  constructor(data?: PartialMessage<GetMyListChartByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.GetMyListChartByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "my_list_chart", kind: "message", T: MyListChart },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMyListChartByIDResponse {
    return new GetMyListChartByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMyListChartByIDResponse {
    return new GetMyListChartByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMyListChartByIDResponse {
    return new GetMyListChartByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMyListChartByIDResponse | PlainMessage<GetMyListChartByIDResponse> | undefined, b: GetMyListChartByIDResponse | PlainMessage<GetMyListChartByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetMyListChartByIDResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.AddMyListChartRequest
 */
export class AddMyListChartRequest extends Message<AddMyListChartRequest> {
  /**
   * @generated from field: int32 my_list_id = 1;
   */
  myListId = 0;

  /**
   * @generated from field: int32 chart_id = 2;
   */
  chartId = 0;

  /**
   * @generated from field: enums.ClearType clear_type = 3;
   */
  clearType = ClearType.UNSPECIFIED;

  /**
   * @generated from field: string memo = 4;
   */
  memo = "";

  constructor(data?: PartialMessage<AddMyListChartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.AddMyListChartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "my_list_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "chart_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "clear_type", kind: "enum", T: proto3.getEnumType(ClearType) },
    { no: 4, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMyListChartRequest {
    return new AddMyListChartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMyListChartRequest {
    return new AddMyListChartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMyListChartRequest {
    return new AddMyListChartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddMyListChartRequest | PlainMessage<AddMyListChartRequest> | undefined, b: AddMyListChartRequest | PlainMessage<AddMyListChartRequest> | undefined): boolean {
    return proto3.util.equals(AddMyListChartRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.AddMyListChartResponse
 */
export class AddMyListChartResponse extends Message<AddMyListChartResponse> {
  constructor(data?: PartialMessage<AddMyListChartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.AddMyListChartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMyListChartResponse {
    return new AddMyListChartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMyListChartResponse {
    return new AddMyListChartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMyListChartResponse {
    return new AddMyListChartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddMyListChartResponse | PlainMessage<AddMyListChartResponse> | undefined, b: AddMyListChartResponse | PlainMessage<AddMyListChartResponse> | undefined): boolean {
    return proto3.util.equals(AddMyListChartResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.ChangeMyListChartClearTypeRequest
 */
export class ChangeMyListChartClearTypeRequest extends Message<ChangeMyListChartClearTypeRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: enums.ClearType clear_type = 2;
   */
  clearType = ClearType.UNSPECIFIED;

  constructor(data?: PartialMessage<ChangeMyListChartClearTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.ChangeMyListChartClearTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "clear_type", kind: "enum", T: proto3.getEnumType(ClearType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMyListChartClearTypeRequest {
    return new ChangeMyListChartClearTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMyListChartClearTypeRequest {
    return new ChangeMyListChartClearTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMyListChartClearTypeRequest {
    return new ChangeMyListChartClearTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMyListChartClearTypeRequest | PlainMessage<ChangeMyListChartClearTypeRequest> | undefined, b: ChangeMyListChartClearTypeRequest | PlainMessage<ChangeMyListChartClearTypeRequest> | undefined): boolean {
    return proto3.util.equals(ChangeMyListChartClearTypeRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.ChangeMyListChartClearTypeResponse
 */
export class ChangeMyListChartClearTypeResponse extends Message<ChangeMyListChartClearTypeResponse> {
  constructor(data?: PartialMessage<ChangeMyListChartClearTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.ChangeMyListChartClearTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMyListChartClearTypeResponse {
    return new ChangeMyListChartClearTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMyListChartClearTypeResponse {
    return new ChangeMyListChartClearTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMyListChartClearTypeResponse {
    return new ChangeMyListChartClearTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMyListChartClearTypeResponse | PlainMessage<ChangeMyListChartClearTypeResponse> | undefined, b: ChangeMyListChartClearTypeResponse | PlainMessage<ChangeMyListChartClearTypeResponse> | undefined): boolean {
    return proto3.util.equals(ChangeMyListChartClearTypeResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.ChangeMyListChartMemoRequest
 */
export class ChangeMyListChartMemoRequest extends Message<ChangeMyListChartMemoRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string memo = 2;
   */
  memo = "";

  constructor(data?: PartialMessage<ChangeMyListChartMemoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.ChangeMyListChartMemoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMyListChartMemoRequest {
    return new ChangeMyListChartMemoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMyListChartMemoRequest {
    return new ChangeMyListChartMemoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMyListChartMemoRequest {
    return new ChangeMyListChartMemoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMyListChartMemoRequest | PlainMessage<ChangeMyListChartMemoRequest> | undefined, b: ChangeMyListChartMemoRequest | PlainMessage<ChangeMyListChartMemoRequest> | undefined): boolean {
    return proto3.util.equals(ChangeMyListChartMemoRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.ChangeMyListChartMemoResponse
 */
export class ChangeMyListChartMemoResponse extends Message<ChangeMyListChartMemoResponse> {
  constructor(data?: PartialMessage<ChangeMyListChartMemoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.ChangeMyListChartMemoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMyListChartMemoResponse {
    return new ChangeMyListChartMemoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMyListChartMemoResponse {
    return new ChangeMyListChartMemoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMyListChartMemoResponse {
    return new ChangeMyListChartMemoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMyListChartMemoResponse | PlainMessage<ChangeMyListChartMemoResponse> | undefined, b: ChangeMyListChartMemoResponse | PlainMessage<ChangeMyListChartMemoResponse> | undefined): boolean {
    return proto3.util.equals(ChangeMyListChartMemoResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.DeleteMyListChartRequest
 */
export class DeleteMyListChartRequest extends Message<DeleteMyListChartRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteMyListChartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.DeleteMyListChartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMyListChartRequest {
    return new DeleteMyListChartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMyListChartRequest {
    return new DeleteMyListChartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMyListChartRequest {
    return new DeleteMyListChartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMyListChartRequest | PlainMessage<DeleteMyListChartRequest> | undefined, b: DeleteMyListChartRequest | PlainMessage<DeleteMyListChartRequest> | undefined): boolean {
    return proto3.util.equals(DeleteMyListChartRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.DeleteMyListChartResponse
 */
export class DeleteMyListChartResponse extends Message<DeleteMyListChartResponse> {
  constructor(data?: PartialMessage<DeleteMyListChartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.DeleteMyListChartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMyListChartResponse {
    return new DeleteMyListChartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMyListChartResponse {
    return new DeleteMyListChartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMyListChartResponse {
    return new DeleteMyListChartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMyListChartResponse | PlainMessage<DeleteMyListChartResponse> | undefined, b: DeleteMyListChartResponse | PlainMessage<DeleteMyListChartResponse> | undefined): boolean {
    return proto3.util.equals(DeleteMyListChartResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.GetMyListChartAttachmentsByMyListChartIDRequest
 */
export class GetMyListChartAttachmentsByMyListChartIDRequest extends Message<GetMyListChartAttachmentsByMyListChartIDRequest> {
  /**
   * @generated from field: int32 my_list_chart_id = 1;
   */
  myListChartId = 0;

  constructor(data?: PartialMessage<GetMyListChartAttachmentsByMyListChartIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.GetMyListChartAttachmentsByMyListChartIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "my_list_chart_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMyListChartAttachmentsByMyListChartIDRequest {
    return new GetMyListChartAttachmentsByMyListChartIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMyListChartAttachmentsByMyListChartIDRequest {
    return new GetMyListChartAttachmentsByMyListChartIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMyListChartAttachmentsByMyListChartIDRequest {
    return new GetMyListChartAttachmentsByMyListChartIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMyListChartAttachmentsByMyListChartIDRequest | PlainMessage<GetMyListChartAttachmentsByMyListChartIDRequest> | undefined, b: GetMyListChartAttachmentsByMyListChartIDRequest | PlainMessage<GetMyListChartAttachmentsByMyListChartIDRequest> | undefined): boolean {
    return proto3.util.equals(GetMyListChartAttachmentsByMyListChartIDRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.GetMyListChartAttachmentsByMyListChartIDResponse
 */
export class GetMyListChartAttachmentsByMyListChartIDResponse extends Message<GetMyListChartAttachmentsByMyListChartIDResponse> {
  /**
   * @generated from field: mylist.v1.MyListChart my_list_chart = 1;
   */
  myListChart?: MyListChart;

  /**
   * @generated from field: repeated mylist.v1.MyListChartAttachment my_list_chart_attachments = 2;
   */
  myListChartAttachments: MyListChartAttachment[] = [];

  constructor(data?: PartialMessage<GetMyListChartAttachmentsByMyListChartIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.GetMyListChartAttachmentsByMyListChartIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "my_list_chart", kind: "message", T: MyListChart },
    { no: 2, name: "my_list_chart_attachments", kind: "message", T: MyListChartAttachment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMyListChartAttachmentsByMyListChartIDResponse {
    return new GetMyListChartAttachmentsByMyListChartIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMyListChartAttachmentsByMyListChartIDResponse {
    return new GetMyListChartAttachmentsByMyListChartIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMyListChartAttachmentsByMyListChartIDResponse {
    return new GetMyListChartAttachmentsByMyListChartIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMyListChartAttachmentsByMyListChartIDResponse | PlainMessage<GetMyListChartAttachmentsByMyListChartIDResponse> | undefined, b: GetMyListChartAttachmentsByMyListChartIDResponse | PlainMessage<GetMyListChartAttachmentsByMyListChartIDResponse> | undefined): boolean {
    return proto3.util.equals(GetMyListChartAttachmentsByMyListChartIDResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.AddMyListChartAttachmentRequest
 */
export class AddMyListChartAttachmentRequest extends Message<AddMyListChartAttachmentRequest> {
  /**
   * @generated from field: int32 my_list_chart_id = 1;
   */
  myListChartId = 0;

  /**
   * @generated from field: enums.AttachmentType attachment_type = 2;
   */
  attachmentType = AttachmentType.UNSPECIFIED;

  /**
   * @generated from field: string file_url = 3;
   */
  fileUrl = "";

  /**
   * @generated from field: string caption = 4;
   */
  caption = "";

  constructor(data?: PartialMessage<AddMyListChartAttachmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.AddMyListChartAttachmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "my_list_chart_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "attachment_type", kind: "enum", T: proto3.getEnumType(AttachmentType) },
    { no: 3, name: "file_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "caption", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMyListChartAttachmentRequest {
    return new AddMyListChartAttachmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMyListChartAttachmentRequest {
    return new AddMyListChartAttachmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMyListChartAttachmentRequest {
    return new AddMyListChartAttachmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddMyListChartAttachmentRequest | PlainMessage<AddMyListChartAttachmentRequest> | undefined, b: AddMyListChartAttachmentRequest | PlainMessage<AddMyListChartAttachmentRequest> | undefined): boolean {
    return proto3.util.equals(AddMyListChartAttachmentRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.AddMyListChartAttachmentResponse
 */
export class AddMyListChartAttachmentResponse extends Message<AddMyListChartAttachmentResponse> {
  constructor(data?: PartialMessage<AddMyListChartAttachmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.AddMyListChartAttachmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMyListChartAttachmentResponse {
    return new AddMyListChartAttachmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMyListChartAttachmentResponse {
    return new AddMyListChartAttachmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMyListChartAttachmentResponse {
    return new AddMyListChartAttachmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddMyListChartAttachmentResponse | PlainMessage<AddMyListChartAttachmentResponse> | undefined, b: AddMyListChartAttachmentResponse | PlainMessage<AddMyListChartAttachmentResponse> | undefined): boolean {
    return proto3.util.equals(AddMyListChartAttachmentResponse, a, b);
  }
}

/**
 * @generated from message mylist.v1.DeleteMyListChartAttachmentRequest
 */
export class DeleteMyListChartAttachmentRequest extends Message<DeleteMyListChartAttachmentRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteMyListChartAttachmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.DeleteMyListChartAttachmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMyListChartAttachmentRequest {
    return new DeleteMyListChartAttachmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMyListChartAttachmentRequest {
    return new DeleteMyListChartAttachmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMyListChartAttachmentRequest {
    return new DeleteMyListChartAttachmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMyListChartAttachmentRequest | PlainMessage<DeleteMyListChartAttachmentRequest> | undefined, b: DeleteMyListChartAttachmentRequest | PlainMessage<DeleteMyListChartAttachmentRequest> | undefined): boolean {
    return proto3.util.equals(DeleteMyListChartAttachmentRequest, a, b);
  }
}

/**
 * @generated from message mylist.v1.DeleteMyListChartAttachmentResponse
 */
export class DeleteMyListChartAttachmentResponse extends Message<DeleteMyListChartAttachmentResponse> {
  constructor(data?: PartialMessage<DeleteMyListChartAttachmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mylist.v1.DeleteMyListChartAttachmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMyListChartAttachmentResponse {
    return new DeleteMyListChartAttachmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMyListChartAttachmentResponse {
    return new DeleteMyListChartAttachmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMyListChartAttachmentResponse {
    return new DeleteMyListChartAttachmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMyListChartAttachmentResponse | PlainMessage<DeleteMyListChartAttachmentResponse> | undefined, b: DeleteMyListChartAttachmentResponse | PlainMessage<DeleteMyListChartAttachmentResponse> | undefined): boolean {
    return proto3.util.equals(DeleteMyListChartAttachmentResponse, a, b);
  }
}

