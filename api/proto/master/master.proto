syntax = "proto3";

package master;

import "enums/master.proto";
import "google/protobuf/timestamp.proto";
import "master/artist.proto";
import "master/chart.proto";
import "master/singer.proto";
import "master/song.proto";
import "master/unit.proto";
import "validate/validate.proto";

option go_package = "github.com/Shakkuuu/sekai-songs-mylist/internal/gen/master";

// Artist
message GetArtistsRequest {}
message GetArtistsResponse {
  repeated master.Artist artists = 1;
}
message GetArtistRequest {
  int32 id = 1;
}
message GetArtistResponse {
  master.Artist artist = 1;
}
message CreateArtistRequest {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  string kana = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
}
message CreateArtistResponse {}

// Singer
message GetSingersRequest {}
message GetSingersResponse {
  repeated master.Singer singers = 1;
}
message GetSingerRequest {
  int32 id = 1;
}
message GetSingerResponse {
  master.Singer singer = 1;
}
message CreateSingerRequest {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
}
message CreateSingerResponse {}

// Unit
message GetUnitsRequest {}
message GetUnitsResponse {
  repeated master.Unit units = 1;
}
message GetUnitRequest {
  int32 id = 1;
}
message GetUnitResponse {
  master.Unit unit = 1;
}
message CreateUnitRequest {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
}
message CreateUnitResponse {}

// VocalPattern
// message GetVocalPatternsRequest {}
// message GetVocalPatternsResponse {
//   repeated master.VocalPattern vocal_patterns = 1;
// }
// message GetVocalPatternRequest {
//   int32 id = 1;
// }
// message GetVocalPatternResponse {
//   master.VocalPattern vocal_pattern = 1;
// }
message CreateVocalPatternRequest {
  int32 song_id = 1 [(validate.rules).int32.gte = 1];
  string name = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  repeated int32 singer_ids = 3 [(validate.rules).repeated.items.int32.gte = 1];
  repeated int32 singer_positions = 4 [(validate.rules).repeated.items.int32.gte = 1];
}
message CreateVocalPatternResponse {}

// Song
message GetSongsRequest {}
message GetSongsResponse {
  repeated master.Song songs = 1;
}
message GetSongRequest {
  int32 id = 1;
}
message GetSongResponse {
  master.Song song = 1;
}
message CreateSongRequest {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  string kana = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  int32 lyrics_id = 3 [(validate.rules).int32.gte = 1];
  int32 music_id = 4 [(validate.rules).int32.gte = 1];
  int32 arrangement_id = 5 [(validate.rules).int32.gte = 1];
  string thumbnail = 6 [(validate.rules).string.min_len = 1];
  string original_video = 7 [(validate.rules).string.min_len = 1];
  google.protobuf.Timestamp release_time = 8 [(validate.rules).timestamp.required = true];
  bool deleted = 9;
  repeated int32 unit_ids = 10 [(validate.rules).repeated.items.int32.gte = 1];
  repeated enums.MusicVideoType music_video_types = 11 [(validate.rules).repeated.items.enum.defined_only = true];
}
message CreateSongResponse {}

// Chart
message GetChartsRequest {}
message GetChartsResponse {
  repeated master.Chart charts = 1;
}
message GetChartRequest {
  int32 id = 1;
}
message GetChartResponse {
  master.Chart chart = 1;
}
message CreateChartRequest {
  int32 song_id = 1 [(validate.rules).int32.gte = 1];
  enums.DifficultyType difficulty_type = 2 [(validate.rules).enum.defined_only = true];
  int32 level = 3 [(validate.rules).int32 = {
    gte: 1
    lt: 100
  }];
  string chart_view_link = 4 [(validate.rules).string.min_len = 1];
}
message CreateChartResponse {}

service MasterService {
  // Artist
  rpc GetArtists(GetArtistsRequest) returns (GetArtistsResponse);
  rpc GetArtist(GetArtistRequest) returns (GetArtistResponse);
  rpc CreateArtist(CreateArtistRequest) returns (CreateArtistResponse);
  // Singer
  rpc GetSingers(GetSingersRequest) returns (GetSingersResponse);
  rpc GetSinger(GetSingerRequest) returns (GetSingerResponse);
  rpc CreateSinger(CreateSingerRequest) returns (CreateSingerResponse);
  // Unit
  rpc GetUnits(GetUnitsRequest) returns (GetUnitsResponse);
  rpc GetUnit(GetUnitRequest) returns (GetUnitResponse);
  rpc CreateUnit(CreateUnitRequest) returns (CreateUnitResponse);
  // VocalPattern
  // rpc GetVocalPatterns(GetVocalPatternsRequest) returns (GetVocalPatternsResponse);
  // rpc GetVocalPattern(GetVocalPatternRequest) returns (GetVocalPatternResponse);
  rpc CreateVocalPattern(CreateVocalPatternRequest) returns (CreateVocalPatternResponse);
  // Song
  rpc GetSongs(GetSongsRequest) returns (GetSongsResponse);
  rpc GetSong(GetSongRequest) returns (GetSongResponse);
  rpc CreateSong(CreateSongRequest) returns (CreateSongResponse);
  // Chart
  rpc GetCharts(GetChartsRequest) returns (GetChartsResponse);
  rpc GetChart(GetChartRequest) returns (GetChartResponse);
  rpc CreateChart(CreateChartRequest) returns (CreateChartResponse);
}
